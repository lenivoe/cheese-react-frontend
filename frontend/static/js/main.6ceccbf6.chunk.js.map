{"version":3,"sources":["components/Header.tsx","components/Forms/BlockMenu.tsx","models/ParamDataType.ts","components/utils/RusDatePicker.tsx","components/Forms/Items/DateItem.tsx","components/Forms/Items/SelectItem.tsx","components/Forms/Items/hoc/withCompositeCssClass.tsx","components/Forms/Items/hoc/withError.tsx","components/Forms/StrainSavingForm/Fields.tsx","components/Forms/Items/TextItem.tsx","components/Forms/StrainSavingForm/ParamField.tsx","components/Forms/StrainSavingForm/PropertyItem.tsx","components/Forms/StrainSavingForm/PropertiesList.tsx","utils/API.ts","components/Forms/StrainSavingForm/BackendDataHooks.ts","components/Forms/StrainSavingForm/validationSchema.ts","components/Forms/Items/FormErrorMessage.tsx","components/Forms/StrainSavingForm/StrainSavingForm.tsx","components/Forms/MicroorganismsCatalog.tsx","components/Forms/Items/ButtonItem.tsx","components/Forms/Items/List.tsx","components/Forms/PropertyEditForm/Blocks/PrimaryDataList.tsx","components/Forms/PropertyEditForm/Blocks/PropertyList.tsx","components/Forms/PropertyEditForm/Blocks/ParameterList.tsx","components/Forms/PropertyEditForm/Blocks/PropertyEditBlock.tsx","components/Forms/PropertyEditForm/Blocks/PropertySavingBlock.tsx","components/Forms/PropertyEditForm/Blocks/ParamSavingBlock.tsx","components/Forms/PropertyEditForm/Blocks/MakeGroupFrom.tsx","components/Forms/PropertyEditForm/PropertyEditForm.tsx","hooks/useMenuState.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","onMenuButtonClick","isMenuButtonActive","title","active","className","onClick","MenuItem","label","BlockMenu","items","visible","map","id","url","to","DATE_FORMAT","RusDatePicker","props","locale","ru","dateFormat","rest","DateItem","format","onValueChange","labelClassName","inputClassName","assert","onChange","name","useState","nanoid","cssId","setFieldValue","useFormikContext","useField","value","field","disabled","sendValue","onDateChange","useCallback","date","moment","htmlFor","selected","Date","SelectItem","placeholder","UNSELECTED_VALUE","children","onSelectChange","e","target","React","Children","count","hidden","withCompositeCssClass","Component","classNamePrefix","wrap","input","withError","errClass","htmlTag","component","TextField","type","onTextChange","DateField","SelectField","ParamField","param","formalParameter","parameterDataType","PropertyItem","PropertiesList","propType","values","propHelpers","properties","prop","propIdx","ungroupedField","groupesField","ungrouped","ungroupedHelpers","paramIdx","groups","groupesHelpers","group","groupIdx","parameters","groupId","axiosInst","axios","create","apiConfig","defaults","baseURL","defaultTimeout","timeoutMsg","timeout","getConfig","timeoutErrorMessage","Generator","a","get","response","data","post","delete","API","strain","getAll","getById","deleteById","genus","getTypes","getStrains","property","getAllWithParameters","postWithParams","dataType","isUsing","isListUsing","download","strainId","Number","parseInt","undefined","Promise","all","upload","requiredMsg","validationSchema","Yup","shape","notOneOf","required","dateReceiving","collectionIndex","source","obtainingMethod","creator","notRequired","dateAdded","FormErrorMessage","isPending","error","message","StrainSavingForm","initValues","useParams","asyncState","useAsync","watch","isStrainExist","useDownloadData","deferFn","genusList","typeList","sort","p1","p2","forEach","g1","g2","bio","filter","isNote","note","today","enableReinitialize","initialValues","onSubmit","strainData","run","curTypeList","curGenusId","isFulfilled","_name","find","href","MicroorganismsCatalog","path","useRouteMatch","exact","GenusList","join","TypeList","StrainList","fetchData","listNumber","length","toString","substr","genusId","typeId","strainList","ButtonItem","useDisabledClass","onClickCallback","List","valueList","onSelect","child","i","ListChild","action","PrimaryDataList","cssPrefix","deleteButtonLabel","itemList","onDelete","disableDeleteBtn","useMemo","item","onDeleteCallback","style","color","PropertyList","paramListName","propList","propInfo","ParameterList","paramInfo","flatMap","console","log","btnClassName","part","isActive","PropertyEditBlock","state","PropertySavingBlock","needEdit","ParamSavingBlock","MakeGroupFrom","downloadPropListAsync","allProperty","paramIdList","isUsingList","addUsingInfo","uploadPropAsync","removePropAsync","PropertyEditForm","uploadProp","removeProp","removing","JSON","parse","stringify","info","saving","FormInner","isPropSave","isParamSave","isGroupEdit","menuLabels","App","pathname","useLocation","setActiveItem","setVisible","toggleVisible","useEffect","reduce","startsWith","useMenuState","fromLeftClass","from","AppConfigurator","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAQe,SAASA,EAAT,GAIE,IAHbC,EAGY,EAHZA,kBACAC,EAEY,EAFZA,mBACAC,EACY,EADZA,MAEMC,EAASF,EAAqB,UAAY,GAEhD,OACI,wBAAQG,UAAU,mBAAlB,SACI,sBAAKA,UAAU,iCAAf,UACI,qBACIA,UAAW,kCAAoCD,EAC/CE,QAASL,EAFb,sCAMA,qBAAKI,UAAU,gBAAf,SAAgCF,SCThD,IAsBMI,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOJ,EAAV,EAAUA,OAAQE,EAAlB,EAAkBA,QAAlB,OACb,qBAAKA,QAASA,EAASD,UAAS,+BAA0BD,EAAS,SAAW,IAA9E,SACI,qBAAKC,UAAU,4BAAf,SACI,+BAAOG,SAKJC,EA9BG,SAAC,GAAuD,IAArDL,EAAoD,EAApDA,OAAQM,EAA4C,EAA5CA,MAA4C,IAArCC,QAChC,YADqE,SAKjE,qBAAKN,UAAU,qBAAf,SACI,qBAAKA,UAAU,OAAf,SACKK,EAAME,KAAI,gBAAGC,EAAH,EAAGA,GAAIL,EAAP,EAAOA,MAAOM,EAAd,EAAcA,IAAd,OACP,cAAC,IAAD,CAAMT,UAAU,YAAYU,GAAID,EAAhC,SACI,cAAC,EAAD,CAAUN,MAAOA,EAAOJ,OAAQS,KAAE,OAAKT,QAAL,IAAKA,OAAL,EAAKA,EAAQS,OADTA,UAN/C,M,uDCVFG,EAAc,a,2DCHZ,SAASC,EAAcC,GAClC,MAA4DA,EAApDC,cAAR,MAAiBC,IAAjB,IAA4DF,EAAvCG,kBAArB,MAAkC,aAAlC,EAAmDC,EAAnD,YAA4DJ,EAA5D,yBACA,OAAO,cAAC,IAAD,aAAYC,OAAQA,EAAQE,WAAYA,GAAgBC,ICMpD,SAASC,EAAT,GAQyB,IAAD,IAPnCC,cAOmC,MAP1B,aAO0B,EANnChB,EAMmC,EANnCA,MACAiB,EAKmC,EALnCA,cACApB,EAImC,EAJnCA,UACAqB,EAGmC,EAHnCA,eACAC,EAEmC,EAFnCA,eACGT,EACgC,gGACnCU,KACKV,EAAMW,SADL,iBAEQX,EAAMY,KAFd,8CAKN,MAAgBC,mBAASC,KAAlBC,EAAP,oBACQC,EAAkBC,cAAlBD,cAGR,EAA2CE,YAASlB,GAApD,sBAASmB,EAAT,EAASA,MAAuBC,GAAhC,EAAgBT,SAAhB,qCACQU,EAAarB,EAAbqB,SAIFC,EAA+B,OAAGf,QAAH,IAAGA,IAAiBS,EACnDO,EAA4CC,uBAC9C,SAACC,GAAD,OAAUH,EAAUF,EAAMR,KAAMc,IAAOD,GAAMnB,OAAOA,MACpD,CAACc,EAAMR,KAAMN,EAAQgB,IAGzB,OACI,sBAAKnC,UAAWA,EAAY,eAA5B,UACI,uBAAOwC,QAASZ,EAAO5B,UAAWqB,EAAiB,cAAnD,SACKlB,IAEL,cAACS,EAAD,2BACQqB,GADR,IAEIzB,GAAIoB,EACJ5B,UAAWsB,EAAiB,cAC5BmB,SAAU,IAAIC,KAAKH,IAAOP,GAAOb,OAAOA,IACxCK,SAAUY,EACVF,SAAUA,QC1C1B,SAASS,EAAT,GAQ0C,IAAD,IAPrCC,mBAOqC,MAPvB,sDAOuB,EANrCzC,EAMqC,EANrCA,MACAiB,EAKqC,EALrCA,cACApB,EAIqC,EAJrCA,UACAqB,EAGqC,EAHrCA,eACAC,EAEqC,EAFrCA,eACGT,EACkC,qGACrCU,KACKV,EAAMW,SADL,iBAEQX,EAAMY,KAFd,8CAKN,MAAgBC,mBAASC,KAAlBC,EAAP,oBACA,EAAsEG,YAASlB,GAA/E,0BAASmB,aAAT,MAAiBW,EAAWE,iBAA5B,EAA8CrB,EAA9C,EAA8CA,SAAaS,EAA3D,oCACQa,EAAuBjC,EAAvBiC,SAAUZ,EAAarB,EAAbqB,SAEZa,EAA8DV,uBAChE,SAACW,GAAD,OACI5B,EAAgBA,EAAc4B,EAAEC,OAAOxB,KAAMuB,EAAEC,OAAOjB,OAASR,EAASwB,KAC5E,CAAC5B,EAAeI,IAGpB,OACI,sBAAKxB,UAAWA,EAAY,eAA5B,UACI,uBAAOwC,QAASZ,EAAO5B,UAAWqB,EAAiB,cAAnD,SACKlB,IAEL,mDACQ8B,GADR,IAEIzB,GAAIoB,EACJ5B,UAAWsB,EAAiB,cAC5BU,MAAOA,EACPE,SAAUA,GAA+C,IAAnCgB,IAAMC,SAASC,MAAMN,GAC3CtB,SAAUuB,EANd,UAQI,wBAAQM,QAAM,EAACnB,UAAQ,EAACF,MAAOW,EAAWE,iBAA1C,SACKD,IAEJE,SAMjBH,EAAWE,iBAAmB,wBAEfF,QCvDA,SAASW,EACpBC,EACAC,GAEA,IAAMC,EAAI,UAAMD,EAAN,UACJrD,EAAK,UAAMqD,EAAN,WACLE,EAAK,UAAMF,EAAN,WAEX,OAAO,SAAC3C,GAAD,OACH,cAAC0C,EAAD,2BACQ1C,GADR,IAEIb,UAAS,UAAKyD,EAAL,YAAa5C,EAAMb,WAC5BqB,eAAc,UAAKlB,EAAL,YAAcU,EAAMQ,gBAClCC,eAAc,UAAKoC,EAAL,YAAc7C,EAAMS,oBCb9C,IAWeqC,EAXG,SACdJ,GADc,IAEdK,EAFc,uDAEH,cACXC,EAHc,uDAGJ,MAHI,OAIb,SAAChD,GAAD,OACD,qCACI,cAAC0C,EAAD,eAAe1C,IACf,cAAC,IAAD,CAAcY,KAAMZ,EAAMY,KAAMqC,UAAWD,EAAS7D,UAAW4D,SCF1DG,EAAYJ,EAAUL,GCFpB,YAOI,IANfnD,EAMc,EANdA,MACAiB,EAKc,EALdA,cACApB,EAIc,EAJdA,UACAqB,EAGc,EAHdA,eACAC,EAEc,EAFdA,eACGT,EACW,uFACdU,KACKV,EAAMW,SADL,iBAEQX,EAAMY,KAFd,8CAKN,MAAgBC,mBAASC,KAAlBC,EAAP,oBACA,EAAiCG,YAASlB,GAA1C,sBAASW,EAAT,EAASA,SAAaS,EAAtB,4BACQW,EAAgC/B,EAAhC+B,YAAaoB,EAAmBnD,EAAnBmD,KAAM9B,EAAarB,EAAbqB,SAErB+B,EAA2D5B,uBAC7D,SAACW,GAAD,OACI5B,EAAgBA,EAAc4B,EAAEC,OAAOxB,KAAMuB,EAAEC,OAAOjB,OAASR,EAASwB,KAC5E,CAAC5B,EAAeI,IAGpB,OACI,sBAAKxB,UAAWA,EAAY,eAA5B,UACI,uBAAOwC,QAASZ,EAAO5B,UAAWqB,EAAiB,cAAnD,SACKlB,IAEL,iDACQ8B,GADR,IAEIzB,GAAIoB,EACJ5B,UAAWsB,EAAiB,cAC5BsB,YAAaA,EACboB,KAAMA,EACN9B,SAAUA,EACVV,SAAUyC,UDjCyC,eAAgB,cAMtEC,EAAYP,EAAUL,GAJI,SAACzC,GAAD,OACnC,cAACK,EAAD,2BAAcL,GAAd,IAAqBM,OAAQR,OAGuC,eAAgB,cAE3EwD,EAAcR,EACvBL,EAAsBX,EAAY,eAClC,cETW,SAASyB,EAAT,GAAuD,IAAjC3C,EAAgC,EAAhCA,KAAM4C,EAA0B,EAA1BA,MACnCd,EAAYQ,EAChB,OAAQM,EAAMC,gBAAgBC,kBAAkB9C,MAC5C,IAAK,OACL,IAAK,OACD8B,EAAYW,EACZ,MACJ,IAAK,OACDX,EAAYY,EAIpB,OAAO,cAACZ,EAAD,CAAWpD,MAAOkE,EAAMC,gBAAgB7C,KAAMA,KAAI,UAAKA,EAAL,YFD7D0C,EAAYtB,iBAAmBF,EAAWE,iBGG3B2B,MAhBf,SAAsB3D,GAClB,OACI,sBAAKb,UAAU,WAAf,UACI,qBAAKA,UAAU,kBAAf,SACI,+BAAOa,EAAMf,UAEhBe,EAAMiC,SACP,qBAAK9C,UAAU,0BAAf,SACI,wBAAQA,UAAU,wCAAlB,+GCLD,SAASyE,EAAT,GAAkE,IAA9BT,EAA6B,EAAvCU,SAC7BC,EAAW7C,cAAX6C,OAER,OACI,cAAC,IAAD,CAAYlD,KAAMuC,EAAlB,SACK,SAACY,GAAD,OACGD,EAAOE,WAAWb,GAAMzD,KAAI,SAACuE,EAAMC,GAC/B,IAAMC,EAAc,qBAAiBhB,EAAjB,YAAyBe,EAAzB,eACdE,EAAY,qBAAiBjB,EAAjB,YAAyBe,EAAzB,YAElB,OACI,eAAC,EAAD,CAA4BjF,MAAOgF,EAAKrD,KAAxC,UACKqD,EAAKI,WACF,cAAC,IAAD,CAAYzD,KAAMuD,EAAlB,SACK,SAACG,GAAD,uBACGL,EAAKI,iBADR,aACG,EAAgB3E,KACZ,SAAC8D,EAAOe,GAAR,aACI,cAAChB,EAAD,CAEI3C,KAAI,UAAKuD,EAAL,YAAuBI,EAAvB,KACJf,MAAOA,GAHX,UACSA,EAAM7D,UADf,SACsB4E,EAAW,SAUpDN,EAAKO,QACF,cAAC,IAAD,CAAY5D,KAAMwD,EAAlB,SACK,SAACK,GAAD,uBACGR,EAAKO,cADR,aACG,EAAa9E,KAAI,SAACgF,EAAOC,GAAR,aACb,8BACKD,EAAME,WAAWlF,KACd,SAAC8D,EAAOe,GAAR,aACI,cAAChB,EAAD,CAII3C,KAAI,UAAKwD,EAAL,YAAqBO,EAArB,wBAA6CJ,EAA7C,KACJf,MAAOA,GALX,UAEQA,EAAM7D,UAFd,SAEqB4E,EAAW,OAL5C,UAAUG,EAAMG,eAAhB,SAA4BF,EAAW,WArBxCV,EAAKtE,U,4DCb1CmF,E,OAAYC,EAAMC,SAElBC,EAAY,CACd,cACI,OAAOH,EAAUI,SAASC,SAE9B,YAAYvF,GACRkF,EAAUI,SAASC,QAAUvF,GAEjCwF,eAAgB,KAGdC,EAAa,SAACC,GAAD,4IAAgDA,EAAU,IAA1D,YACbC,EAAY,SAACD,GAAD,MAAsB,CACpCA,UACAE,oBAAqBH,EAAWC,KAG9BG,E,wFACF,SAAc7F,GACV,6BAAO,0CAAA8F,EAAA,6DAAOJ,EAAP,+BAAyBL,EAAUG,eAAnC,SACoBN,EAAUa,IAAO/F,EAAK2F,EAAUD,IADpD,cACGM,EADH,yBAEIA,EAASC,MAFb,6C,qBAKX,SAAkBjG,GACd,8CAAO,WAAOD,GAAP,6BAAA+F,EAAA,6DAAmBJ,EAAnB,+BAAqCL,EAAUG,eAA/C,SACoBN,EAAUa,IAAO/F,EAAID,GAAK4F,EAAUD,IADxD,cACGM,EADH,yBAEIA,EAASC,MAFb,2CAAP,wD,kBAKJ,SAAsBjG,GAClB,8CAAO,WAAOuB,GAAP,6BAAAuE,EAAA,6DAAiBJ,EAAjB,+BAAmCL,EAAUG,eAA7C,SACoBN,EAAUgB,KAAQlG,EAAKuB,EAAOoE,EAAUD,IAD5D,cACGM,EADH,yBAEIA,EAASC,MAFb,2CAAP,wD,wBAKJ,SAAqBjG,GACjB,8CAAO,WAAOD,GAAP,6BAAA+F,EAAA,6DAAmBJ,EAAnB,+BAAqCL,EAAUG,eAA/C,SACoBN,EAAUiB,OAAUnG,EAAID,GAAK4F,EAAUD,IAD3D,cACGM,EADH,yBAEIA,EAASC,MAFb,2CAAP,0D,KA+DOG,EAXH,CACRC,OA9CW,CACXC,OAAQT,EAAUE,IAAc,WAChCA,IAAKF,EAAUU,SAAgB,SAACxG,GAAD,wBAAmBA,MAClDmG,KAAML,EAAUK,KAAa,WAC7BC,OAAQN,EAAUW,YAAmB,SAACzG,GAAD,wBAAmBA,OA2CxD0G,MAxCU,CACVH,OAAQT,EAAUE,IAAa,iBAC/BW,SAAUb,EAAUU,SAAsB,SAACxG,GAAD,8BAAyBA,EAAzB,aAC1CmG,KAAML,EAAUK,KAAY,iBAC5BC,OAAQN,EAAUW,YAAkB,SAACzG,GAAD,8BAAyBA,OAqC7DwD,KAlCS,CACT+C,OAAQT,EAAUE,IAAkB,gBACpCY,WAAYd,EAAUU,SAAsB,SAACxG,GAAD,6BAAwBA,EAAxB,eAC5CmG,KAAML,EAAUK,KAAiB,gBACjCC,OAAQN,EAAUW,YAAuB,SAACzG,GAAD,6BAAwBA,OA+BjE6G,SA5Ba,CACbN,OAAQT,EAAUE,IAAsB,aACxCc,qBAAsBhB,EAAUE,IAAsB,yBACtDA,IAAKF,EAAUU,SAAwB,SAACxG,GAAD,0BAAqBA,MAC5DmG,KAAML,EAAUK,KAAqB,aACrCY,eAAgBjB,EAAUK,KAAqB,yBAC/CC,OAAQN,EAAUW,YAA2B,SAACzG,GAAD,0BAAqBA,OAuBlEgH,SApBa,CACbT,OAAQT,EAAUE,IAAqB,eAoBvClC,gBAjBoB,CACpByC,OAAQT,EAAUE,IAAuB,qBACzCA,IAAKF,EAAUU,SAAyB,SAACxG,GAAD,kCAA6BA,MACrEmG,KAAML,EAAUK,KAAsB,qBACtCC,OAAQN,EAAUW,YAA4B,SAACzG,GAAD,kCAA6BA,MAC3EiH,QAASnB,EAAUU,SAAiB,SAACxG,GAAD,yCAAoCA,MACxEkH,YAAapB,EAAUK,KACnB,mCAYJb,aCpGE6B,EAAQ,uCAAG,+BAAApB,EAAA,6DAASqB,EAAT,EAASA,SAChBpH,EAAKoH,EAAWC,OAAOC,SAASF,EAAU,SAAMG,EADzC,kBAENC,QAAQC,IAAI,CACfpB,EAAIK,MAAMH,SACVF,EAAI7C,KAAK+C,SACTvG,EAAKqG,EAAIC,OAAON,IAAIhG,QAAMuH,KALjB,2CAAH,sDAeRG,EAAS,SAAC,GAAD,IAAEpB,EAAF,2BAAwBD,EAAIC,OAAOH,KAAKG,I,SClBjDqB,GAAc,oGAwBLC,GAtBUC,KAAW,CAChCnB,MAAOmB,OAAaC,MAAM,CACtB7G,KAAM4G,OACDE,SAAS,CAACpE,EAAYtB,kBAAmBsF,IACzCK,SAASL,MAElBnE,KAAMqE,OACDC,MAAM,CACH7G,KAAM4G,OACDE,SAAS,CAACpE,EAAYtB,kBAAmBsF,IACzCK,SAASL,MAEjBK,SAASL,IACd1G,KAAM4G,OAAaG,SAASL,IAC5BM,cAAeJ,OAAWG,SAASL,IACnCO,gBAAiBL,OAAaG,SAASL,IACvCQ,OAAQN,OAAaG,SAASL,IAC9BS,gBAAiBP,OAAaG,SAASL,IACvCU,QAASR,OAAaS,cACtBC,UAAWV,OAAWG,SAASL,MCCpBa,GApBU,SAAC,GAAD,IAAGrB,EAAH,EAAGA,SAAUO,EAAb,EAAaA,OAAb,OACrB,qCACKP,EAASsB,WAAa,qBAAKjJ,UAAU,UAAf,sGAEtBkI,EAAOe,WAAa,qBAAKjJ,UAAU,UAAf,kHAEpB2H,EAASuB,OACN,sBAAKlJ,UAAU,cAAf,kKACkC2H,EAASuB,MAAMC,WAIpDjB,EAAOgB,OACJ,sBAAKlJ,UAAU,cAAf,4JACiCkI,EAAOgB,MAAMC,eCR3C,SAASC,KAAoB,IAAD,EAiBnCC,EAhBE1B,EHGqB,WAC3B,IAAQC,EAAa0B,cAAb1B,SACF2B,EAAaC,YAAS7B,EAAU,CAAEC,WAAU6B,MAAO7B,IACzD,OAAO,aAAE8B,gBAAiB9B,GAAa2B,GGNtBI,GACXzB,EHU2BsB,YAAS,CAAEI,QAAS1B,IGRrD,YAAsCP,EAASjB,YAA/C,QAAuD,CAAC,GAAI,QAAIqB,GAAhE,mBAAO8B,EAAP,KAAkBC,EAAlB,KAA4BhD,EAA5B,KAcA,GAZIA,IACAA,EAAOjC,WAAWkF,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGxJ,GAAMyJ,EAAGzJ,MAC/CsG,EAAOjC,WAAWqF,SAAQ,SAACpF,GAAU,IAAD,MAChC,UAAAA,EAAKI,iBAAL,SAAgB6E,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGxJ,GAAMyJ,EAAGzJ,MAC7C,UAAAsE,EAAKO,cAAL,SAAa0E,MAAK,SAACI,EAAIC,GAAL,OAAYD,EAAGzE,QAAW0E,EAAG1E,WAC/C,UAAAZ,EAAKO,cAAL,SAAa6E,SAAQ,SAAC3E,GAAD,OACjBA,EAAME,WAAWsE,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGxJ,GAAMyJ,EAAGzJ,aAMtDsG,EAAQ,CAAC,IAAD,IACAjC,EAAwBiC,EAAxBjC,WAAe5D,EAAvB,YAAgC6F,EAAhC,gBACAuC,EAAU,2BACHpI,GADG,IAENiG,MAAOJ,EAAO9C,KAAKkD,MACnBrC,WAAY,CACRwF,IAAG,UAAExF,EAAWyF,QAAO,SAACxF,GAAD,OAAWA,EAAKyF,iBAApC,QAA+C,GAClDC,KAAI,UAAE3F,EAAWyF,QAAO,SAACxF,GAAD,OAAUA,EAAKyF,iBAAnC,QAA8C,UAGvD,CACH,IAAME,EAAQlI,MAASpB,OAAOR,GAC9B0I,EAAa,CACT5H,KAAM,GACNgH,cAAegC,EACf/B,gBAAiB,GACjBC,OAAQ,GACRC,gBAAiB,GACjBG,UAAW0B,EACX5F,WAAY,CAAEwF,IAAK,GAAIG,KAAM,KAIrC,OACI,sBAAKxK,UAAU,gBAAf,UACI,cAAC,GAAD,CAAkB2H,SAAUA,EAAUO,OAAQA,IAC9C,cAAC,IAAD,CACIwC,oBAAoB,EACpBC,cAAetB,EACfjB,iBAAkBA,GAClBwC,SAAU,YAA6C,EAA1C1D,MAA2C,IAAjClD,EAAgC,EAAhCA,KAAMa,EAA0B,EAA1BA,WAAe5D,EAAW,6CAC7C4J,EAAU,aACZ7G,KAAMA,EACNa,WAAW,GAAD,mBAAMA,EAAWwF,KAAjB,YAAyBxF,EAAW2F,QAC3CvJ,GAEPiH,EAAO4C,IAAID,IAVnB,SAaK,YAAgC,IAA7BlG,EAA4B,EAA5BA,OAAQ9C,EAAoB,EAApBA,cAGFkJ,EAAcjB,EAASQ,QAAO,YAAgB,IAAD,EAAZpD,EAAY,EAAZA,MAC7B8D,EAAU,UAAGrG,EAAOuC,aAAV,aAAG,EAAc1G,GACjC,OAAS0G,EAAM1G,KAAOwK,GAAe9D,EAAM1G,KAAOwK,KAGhD9I,GAAYyF,EAASsD,aAAe/C,EAAOe,UAEjD,OACI,cAAC,IAAD,CAAMjJ,UAAU,0CAAhB,SACI,2BAAUkC,SAAUA,EAApB,UACI,sBAAKlC,UAAU,4BAAf,UACI,sBAAKA,UAAU,qCAAf,UACI,cAACmE,EAAD,CACI1C,KAAK,aACLtB,MAAM,qBACNiB,cAAe,SAAC8J,EAAOlJ,GACnB,IAAMkF,EAAQ2C,EAAUsB,MACpB,SAACjE,GAAD,OAAWA,EAAMzF,OAASO,KAE9BH,EAAc,QAASqF,GACvBrF,EAAc,YAAQkG,IAR9B,SAWK8B,EAAUtJ,KAAI,SAAC2G,GAAD,OACX,wBAAuBlF,MAAOkF,EAAMzF,KAApC,SACKyF,EAAMzF,MADEyF,EAAM1G,SAK3B,qBAAKR,UAAU,4BAAf,SACI,mBACIoL,KAAK,cACLpL,UAAU,iDAFd,oBASR,sBAAKA,UAAU,qCAAf,UACI,cAACmE,EAAD,CACI1C,KAAK,YACLtB,MAAM,qBACNiB,cAAe,SAAC8J,EAAOlJ,GACnB,IAAMgC,EAAO+G,EAAYI,MACrB,SAACnH,GAAD,OAAUA,EAAKvC,OAASO,KAE5BH,EAAc,OAAQmC,IAP9B,SAUK+G,EAAYxK,KAAI,SAACyD,GAAD,OACb,wBAAsBhC,MAAOgC,EAAKvC,KAAlC,SACKuC,EAAKvC,MADGuC,EAAKxD,SAK1B,qBAAKR,UAAU,4BAAf,SACI,mBACIoL,KAAK,cACLpL,UAAU,iDAFd,oBAUR,cAAC+D,EAAD,CAAW5D,MAAM,wFAAkBsB,KAAK,SAExC,cAACyC,EAAD,CACI/D,MAAM,kFACNsB,KAAK,gBACLS,SAAUA,IAGd,cAAC6B,EAAD,CACI5D,MAAM,kFACNsB,KAAK,oBAGT,cAACsC,EAAD,CAAW5D,MAAM,iFAAgBsB,KAAK,WAEtC,cAACsC,EAAD,CACI5D,MAAM,8FACNsB,KAAK,uBAIb,cAACgD,EAAD,CAAgBC,SAAS,QACzB,cAACD,EAAD,CAAgBC,SAAS,SAGzB,sBAAK1E,UAAU,qBAAf,UACI,uBACIA,UAAU,4BACVwC,QAAQ,6BAFZ,iFAMA,yBACIxC,UAAU,6BACVyB,KAAK,gBACLjB,GAAG,6BAHP,UAKI,wBAAQwB,MAAM,IAAd,gEACA,wBAAQA,MAAM,IAAd,gEACA,wBAAQA,MAAM,IAAd,gEACA,wBAAQA,MAAM,IAAd,mEAEJ,wBAAQhC,UAAU,wCAAlB,iEAMJ,sBAAKA,UAAU,sCAAf,UACI,wBACIgE,KAAK,SACLhE,UAAU,mEAFd,oEAMA,wBACIgE,KAAK,SACLhE,UAAU,sEAFd,gE,aC3LrB,SAASqL,KACpB,IAAOC,EAAQC,cAARD,KAEP,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOE,OAAK,EAACF,KAAMA,EAAnB,SACI,cAACG,GAAD,MAEJ,cAAC,IAAD,CAAOD,OAAK,EAACF,KAAMI,gBAAKJ,EAAM,YAA9B,SACI,cAACK,GAAD,MAEJ,cAAC,IAAD,CAAOH,OAAK,EAACF,KAAMI,gBAAKJ,EAAM,oBAA9B,SACI,cAACM,GAAD,SAWhB,SAASH,KACL,IAAOhL,EAAO8K,cAAP9K,IACDoL,EAAYxJ,uBAAY,kBAAMwE,EAAIK,MAAMH,WAAU,IACxD,EAAiCyC,YAASqC,GAAnCnF,EAAP,EAAOA,KAAMwC,EAAb,EAAaA,MAEb,GAFA,EAAoBD,UAGhB,OAAO,yHAEX,GAAIC,EACA,OAAO,wLAAmCA,EAAMC,QAAzC,OAGX,IAAMU,EAAYnD,EAEHoF,EAAcjC,EAAtBkC,OACP,OACI,qBAAK/L,UAAU,mBAAf,SACI,oBAAIA,UAAU,aAAd,SACK6J,EAAUtJ,KAAI,SAAC2G,GAAD,OACX,oBAAIlH,UAAU,8BAAd,SACI,eAAC,IAAD,CAAMA,UAAU,8BAA8BU,GAAIgL,gBAAKjL,EAAKyG,EAAM1G,GAAIwL,YAAtE,UACI,sBACIhM,UAAU,8BADd,SAC6CkH,EAAMzF,KAAKsK,QAAU,GAC9D7E,EAAMzF,KAAKwK,OAAO,EAAG,IAAM,MAAQ/E,EAAMzF,OAC7C,sBAAMzB,UAAU,0CAAhB,SAA2D8L,QALlB5E,EAAM1G,WAe3E,SAASmL,KACL,IAAOlL,EAAO8K,cAAP9K,IACDyL,EAAUrE,OAAOyB,cAAuB4C,SAExCL,EAAYxJ,uBAAY,kBAAMwE,EAAIK,MAAMC,SAAS+E,KAAU,CAACA,IAClE,EAAiC1C,YAASqC,GAAnCnF,EAAP,EAAOA,KAAMwC,EAAb,EAAaA,MAEb,GAFA,EAAoBD,UAGhB,OAAO,yHAEX,GAAIC,EACA,OAAO,wLAAmCA,EAAMC,QAAzC,OAGX,IAAMW,EAAWpD,EAEjB,OACI,qBAAK1G,UAAU,mBAAf,SACI,oBAAIA,UAAU,sBAAd,SACK8J,EACIvJ,KAAI,SAACyD,GAAD,OACD,oBAAIhE,UAAU,kCAAd,SACI,cAAC,IAAD,CAAMA,UAAU,8BAA8BU,GAAIgL,gBAAKjL,EAAKuD,EAAKxD,GAAIwL,YAArE,SACKhI,EAAKvC,QAFuCuC,EAAKxD,WAWlF,SAASoL,KAEL,IAAMO,EAAStE,OAAOyB,cAAuB6C,QACvCN,EAAYxJ,uBAAY,kBAAMwE,EAAI7C,KAAKoD,WAAW+E,KAAS,CAACA,IAClE,EAAiC3C,YAASqC,GAAnCnF,EAAP,EAAOA,KAAMwC,EAAb,EAAaA,MAEb,GAFA,EAAoBD,UAGhB,OAAO,yHAEX,GAAIC,EACA,OAAO,wLAAmCA,EAAMC,QAAzC,OAGX,IAAMiD,EAAa1F,EAEnB,OACI,8BACI,oBAAI1G,UAAU,wBAAd,SACKoM,EACI7L,KAAI,SAACuG,GAAD,OACD,oBAAI9G,UAAU,oCAAd,SACI,cAAC,IAAD,CAAMA,UAAU,kCACVU,GAAIgL,gBAAK,UAAW5E,EAAOtG,GAAIwL,WAAY,QADjD,SAEKlF,EAAOrF,QAHuCqF,EAAOtG,WCvGtF,IAuBe6L,GAvBI,SAAC,GAQA,IAPhB5K,EAOe,EAPfA,KACAzB,EAMe,EANfA,UACAkC,EAKe,EALfA,SACAjC,EAIe,EAJfA,QACAE,EAGe,EAHfA,MAGe,IAFf6D,YAEe,MAFR,SAEQ,MADfsI,wBACe,SACTC,EAAkBlK,uBAAY,yBAAMpC,QAAN,IAAMA,OAAN,EAAMA,EAAUwB,KAAO,CAACxB,EAASwB,IACrE,OACI,wBACIA,KAAMA,EACNS,SAAUA,EACVjC,QAASsM,EACTvI,KAAMA,EACNhE,UAAS,UAAKA,EAAL,YAAkBsM,GAAoBpK,EAAW,iBAAmB,IALjF,SAOK/B,KCjBE,SAASqM,GAAK3L,GACzBU,IAAO2B,IAAMC,SAASC,MAAMvC,EAAMiC,YAAcjC,EAAM4L,UAAUV,QAEhE,IAAQtK,EAA0DZ,EAA1DY,KAAMO,EAAoDnB,EAApDmB,MAAOyK,EAA6C5L,EAA7C4L,UAAWzM,EAAkCa,EAAlCb,UAAW8C,EAAuBjC,EAAvBiC,SAAU4J,EAAa7L,EAAb6L,SAErD,OACI,qBAAK1M,UAAWA,EAAhB,SACKkD,IAAMC,SAAS5C,IAAIuC,GAAU,SAAC6J,EAAOC,GAAR,OAC1B,cAACC,GAAD,CACIpL,KAAMA,EACNO,MAAOyK,EAAUG,GACjBnK,SAAUgK,EAAUG,KAAO5K,EAC3B/B,QAASyM,EAJb,SAMKC,SAgBrB,SAASE,GAAUhM,GACf,IAAQY,EAAuDZ,EAAvDY,KAAMO,EAAiDnB,EAAjDmB,MAAOS,EAA0C5B,EAA1C4B,SAAUP,EAAgCrB,EAAhCqB,SAAUjC,EAAsBY,EAAtBZ,QAAS6C,EAAajC,EAAbiC,SAC1CjB,EAAkBC,cAAlBD,cAEF7B,EAAS,oBAAgByC,EAAW,SAAW,IAC/CqK,EAASzK,uBACX,kBAAMH,IAAY,OAACjC,QAAD,IAACA,IAAW4B,GAAeJ,EAAMO,KACnD,CAACP,EAAMO,EAAOE,EAAUjC,EAAS4B,IAGrC,OACI,qBAAK7B,UAAWA,EAAWC,QAAS6M,EAApC,SACKhK,ICpCE,SAASiK,GAAgBlM,GACpC,IAAQY,EAA+DZ,EAA/DY,KAAMuL,EAAyDnM,EAAzDmM,UAAWlN,EAA8Ce,EAA9Cf,MAAOmN,EAAuCpM,EAAvCoM,kBAAmBjL,EAAoBnB,EAApBmB,MAAOkL,EAAarM,EAAbqM,SAClDR,EAAuB7L,EAAvB6L,SAAUS,EAAatM,EAAbsM,SAEZC,EAAmBC,mBACrB,2CAAMH,QAAN,IAAMA,GAAN,UAAMA,EAAU/B,MAAK,SAACmC,GAAD,aAAU,UAAAA,EAAK9M,UAAL,eAASwL,cAAehK,YAAvD,aAAM,EAAyDyF,eAA/D,WACA,CAACyF,EAAUlL,IAGTuL,EAAmBlL,uBACrB,kBAAM8K,EAAS1L,EAAMO,KACrB,CAACmL,EAAUnL,EAAOP,IAGhBzB,EAAS,UAAMgN,EAAN,kCAEf,OACI,cAAC,IAAD,UACI,sBAAKhN,UAAU,yDAAf,UACI,sBAAKA,UAAS,UAAKgN,EAAL,cAAd,UACI,qBAAKhN,UAAS,UAAKgN,EAAL,2BAAd,SACI,+BAAOlN,MAEX,cAAC0M,GAAD,CACIxM,UAAS,UAAKgN,EAAL,yBACTvL,KAAMA,EACNO,MAAOA,EACPyK,WAAW,OAACS,QAAD,IAACA,IAAY,IAAI3M,KAAI,qBAAGC,GAAawL,cAChDU,SAAUA,EALd,gBAOKQ,QAPL,IAOKA,OAPL,EAOKA,EAAU3M,KAAI,gBAAGC,EAAH,EAAGA,GAAIiB,EAAP,EAAOA,KAAMgG,EAAb,EAAaA,QAAb,OACX,qBAEIzH,UAAWA,EACXwN,MAAO/F,EAAU,CAAEgG,MAAO,aAAW1F,EAHzC,SAKI,+BAAOtG,KAJFjB,WASrB,cAAC,GAAD,CACIwD,KAAK,SACL7D,MAAO8M,EACP/K,SAAUkL,EACVd,kBAAkB,EAClBtM,UAAU,wCACVC,QAASsN,SCxDd,SAASG,GAAa7M,GAA2B,IAAD,EAEvDY,EAIAZ,EAJAY,KACAkM,EAGA9M,EAHA8M,cAFJ,EAKI9M,EAFA8D,OAAUiJ,EAHd,EAGcA,SAAUC,EAHxB,EAGwBA,SACpBhM,EACAhB,EADAgB,cAGE6K,EAAWrK,uBACb,SAACZ,EAAcO,GACX,IAAMxB,EAAKsH,SAAS9F,GAChB6L,EAASpL,SAASjC,KAAOA,IACzBqB,EAAcJ,EAAMjB,GACpBqB,EAAc8L,OAAe5F,MAGrC,CAAC4F,EAAeE,EAAUhM,IAGxBsL,EAAW9K,uBACb,SAACZ,EAAcO,GAAf,OACIH,EAAc,uBAAwBG,GAAS8F,SAAS9F,MAC5D,CAACH,IAGL,OACI,cAACkL,GAAD,CACItL,KAAMA,EACNuL,UAAU,aACVlN,MAAM,mDACNmN,kBAAkB,8FAClBjL,MAAK,UAAE6L,EAASpL,SAASjC,UAApB,aAAE,EAAsBwL,WAC7BkB,SAAUU,EACVlB,SAAUA,EACVS,SAAUA,ICnCP,SAASW,GAAcjN,GAA4B,IAAD,EAEzDY,EAGAZ,EAHAY,KADJ,EAIIZ,EAFA8D,OAAUiJ,EAFd,EAEcA,SAAUC,EAFxB,EAEwBA,SAAUE,EAFlC,EAEkCA,UAC9BlM,EACAhB,EADAgB,cAGEqL,EAAWG,mBAAQ,WAAO,IAAD,IACrBvI,EAAI,OAAG8I,QAAH,IAAGA,OAAH,EAAGA,EAAUzC,MAAK,SAACrG,GAAD,OAAUA,EAAKtE,KAAOqN,EAASpL,SAASjC,MACpE,MAAM,GAAN,oCACQsE,QADR,IACQA,OADR,EACQA,EAAMI,iBADd,QAC2B,IAD3B,aAEO,iBAACJ,QAAD,IAACA,OAAD,EAACA,EAAMO,cAAP,QAAiB,IAAI2I,SAAQ,SAACzI,GAAD,OAAWA,EAAME,kBAEtD,CAACmI,EAAUC,EAASpL,SAASjC,KAE1BkM,EAAWrK,uBACb,SAACZ,EAAcO,GAAf,OAAiCH,EAAcJ,EAAMqG,SAAS9F,MAC9D,CAACH,IAGCsL,EAAW9K,uBACb,SAACZ,EAAcO,GACXiM,QAAQC,IAAI,YAAalM,GACzBH,EAAc,wBAAyBG,GAAS8F,SAAS9F,MAE7D,CAACH,IAGL,OACI,cAACkL,GAAD,CACItL,KAAMA,EACNuL,UAAU,aACVlN,MAAM,yDACNmN,kBAAkB,8FAClBjL,MAAK,UAAE+L,EAAUtL,SAASjC,UAArB,aAAE,EAAuBwL,WAC9BkB,SAAUA,EACVR,SAAUA,EACVS,SAAUA,ICvCtB,IAAMgB,GAAe,SAACC,EAAcC,GAChC,IAAMtO,EAASsO,EAAW,SAAW,GACrC,MAAM,cAAN,OAAqBD,EAArB,qCAAsDrO,IAG3C,SAASuO,GAAkBzN,GACtC,IACc0N,EAEV1N,EAFA8D,OAAU4J,MACV1M,EACAhB,EADAgB,cAGJ,OACI,sBAAK7B,UAAU,uCAAf,UACI,cAAC0N,GAAD,aACIjM,KAAK,uBACLkM,cAAc,yBACV9M,IAER,cAACiN,GAAD,aACIrM,KAAK,yBACDZ,IAGR,sBAAKb,UAAU,qCAAf,UACI,cAAC,GAAD,CACIG,MAAM,oGACNH,UAAWmO,GAAa,cAAyB,gBAAVI,GACvCtO,QAAS,kBAAM4B,EAAc,QAAS,kBAG1C,sBAAK7B,UAAU,kDAAf,UACI,cAAC,GAAD,CACIG,MAAM,oGACNH,UAAWmO,GAAa,eAA0B,aAAVI,GACxCtO,QAAS,kBAAM4B,EAAc,QAAS,eAG1C,cAAC,GAAD,CACI1B,MAAM,oGACNH,UAAWmO,GAAa,gBAA2B,cAAVI,GACzCtO,QAAS,kBAAM4B,EAAc,QAAS,mBAI9C,sBAAK7B,UAAU,mDAAf,UACI,cAAC,GAAD,CACIG,MAAM,oGACNH,UAAWmO,GAAa,gBAA2B,cAAVI,GACzCtO,QAAS,kBAAM4B,EAAc,QAAS,gBAE1C,cAAC,GAAD,CACI1B,MAAM,oGACNH,UAAWmO,GAAa,iBAA4B,eAAVI,GAC1CtO,QAAS,kBAAM4B,EAAc,QAAS,0BCnD9D,IAgCe2M,GAhCa,SAAC,GAA2D,EAAzDhO,GAA0D,IAAtDiO,EAAqD,EAArDA,SAAqD,IAA3CnO,QACzC,UADoF,UAEhF,OAAO,KAGX,IAAMR,EAAQ2O,EAAW,oGAAsB,oGACzCzO,EAAYyO,EAAW,qBAAuB,oBACpD,OACI,sBAAKzO,UAAS,qBAAgBA,GAA9B,UACI,qBAAKA,UAAU,oBAAf,SAAoCF,IACpC,eAAC,IAAD,CAAME,UAAU,kBAAhB,UACI,qBAAKA,UAAU,eAAf,SACI,sBAAKA,UAAU,cAAf,UACI,uBAAOA,UAAU,aAAawC,QAAQ,gBAAtC,sFAGA,uBACIxC,UAAU,aACVQ,GAAG,gBACHwD,KAAK,OACLvC,KAAK,uBAIjB,wBAAQzB,UAAU,cAAcgE,KAAK,SAArC,2EC4BD0K,GApDU,SAAC,GAA4D,EAA1DlO,GAA2D,IAAvDiO,EAAsD,EAAtDA,SAAsD,IAA5CnO,QACtC,UADkF,UAE9E,OAAO,KAGX,IAAMR,EAAQ2O,EAAW,oGAAsB,oGACzCzO,EAAYyO,EAAW,sBAAwB,qBACrD,OACI,sBAAKzO,UAAS,qBAAgBA,GAA9B,UACI,qBAAKA,UAAU,oBAAf,SAAoCF,IACpC,eAAC,IAAD,CAAME,UAAU,kBAAhB,UACI,sBAAKA,UAAU,eAAf,UACI,sBAAKA,UAAU,+BAAf,UACI,uBACIA,UAAU,+BACVwC,QAAQ,iBAFZ,sFAMA,uBACIxC,UAAU,+BACVQ,GAAG,iBACHwD,KAAK,OACLvC,KAAK,sBAGb,sBAAKzB,UAAU,+BAAf,UACI,uBACIA,UAAU,+BACVwC,QAAQ,iBAFZ,qEAMA,yBACIxC,UAAU,+BACVyB,KAAK,iBACLjB,GAAG,iBAHP,UAKI,wBAAQwB,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,wBAIZ,wBAAQhC,UAAU,cAAcgE,KAAK,SAArC,2ECjDD,SAAS2K,GAAT,GAAgE,IAAD,IAAtCrO,QACpC,YAD0E,SAKtE,sBAAKN,UAAU,kBAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,yBAAf,+GACA,wBAAQA,UAAU,yCAAlB,kBAEJ,sBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAU,2BAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,sBAAKA,UAAU,kDAAf,UACI,2GACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,oBAKR,sBAAKA,UAAU,mCAAf,UACI,sFACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,oBAKR,sBAAKA,UAAU,oCAAf,UACI,sFACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,oBAKR,sBAAKA,UAAU,mCAAf,UACI,sFACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,uBAMZ,sBAAKA,UAAU,iBAAf,UACI,wBAAQA,UAAU,4CAAlB,8DAGA,wBAAQA,UAAU,kDAAlB,8DAKR,sBAAKA,UAAU,2BAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,sBAAKA,UAAU,kDAAf,UACI,2GACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,oBAKR,sBAAKA,UAAU,mCAAf,UACI,sFACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,oBAKR,sBAAKA,UAAU,oCAAf,UACI,sFACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,oBAKR,sBAAKA,UAAU,mCAAf,UACI,sFACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,uBAMZ,sBAAKA,UAAU,iBAAf,UACI,wBAAQA,UAAU,4CAAlB,8DAGA,wBAAQA,UAAU,kDAAlB,8DAKR,sBAAKA,UAAU,2BAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,sBAAKA,UAAU,kDAAf,UACI,2GACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,oBAKR,sBAAKA,UAAU,mCAAf,UACI,sFACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,oBAKR,sBAAKA,UAAU,oCAAf,UACI,sFACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,oBAKR,sBAAKA,UAAU,mCAAf,UACI,sFACA,qBAAKA,UAAU,0BAAf,SACI,wBAAQA,UAAU,8CAAlB,uBAMZ,sBAAKA,UAAU,iBAAf,UACI,wBAAQA,UAAU,4CAAlB,8DAGA,wBAAQA,UAAU,kDAAlB,oEAxIT,K,SCQA4O,K,8EAAf,oCAAArI,EAAA,sEAC8BM,EAAIQ,SAASC,uBAD3C,cACUuH,EADV,OAEUC,EAAcD,EAAYb,SAAQ,SAAClJ,GAAU,IAAD,IAK9C,MAJe,gCACPA,EAAKI,iBADE,QACW,IADX,aAER,UAACJ,EAAKO,cAAN,QAAgB,IAAI2I,SAAQ,SAACzI,GAAD,OAAWA,EAAME,gBAEnClF,KAAI,SAAC8D,GAAD,OAAWA,EAAM7D,SAP9C,SAU8BqG,EAAIvC,gBAAgBoD,YAAYoH,GAV9D,cAUUC,EAVV,OAYUC,EAAe,SAAC3K,GAAD,mBAAC,eACfA,GADc,IAEjBoD,QAASsH,EAAY1K,EAAM7D,OAGzBoN,EAAWiB,EAAYtO,KAAI,SAACuE,GAAU,IAAD,IACjCI,EAAS,UAAGJ,EAAKI,iBAAR,aAAG,EAAgB3E,IAAIyO,GAChC3J,EAAM,UAAGP,EAAKO,cAAR,aAAG,EAAa9E,KAAI,gBAAGkF,EAAH,EAAGA,WAAexE,EAAlB,iDAAC,eAC1BA,GADyB,IAE5BwE,WAAYA,EAAWlF,IAAIyO,QAGzBvH,KACD,OAACvC,QAAD,IAACA,OAAD,EAACA,EAAWiG,MAAK,SAAC9G,GAAD,OAAWA,EAAMoD,gBAClC,OAACpC,QAAD,IAACA,OAAD,EAACA,EAAQ8F,MAAK,SAAC5F,GAAD,QAAaA,EAAME,WAAW0F,MAAK,SAAC9G,GAAD,OAAWA,EAAMoD,eAEvE,OAAO,2BAAK3C,GAAZ,IAAkBI,YAAWG,SAAQoC,eA5B7C,kBA+BWmG,GA/BX,6C,sBAiCA,IAAMqB,GAAe,uCAAG,+BAAA1I,EAAA,gFAAQc,EAAR,uBACpBR,EAAIQ,SAASV,KAAKU,IADE,2CAAH,sDAEf6H,GAAe,uCAAG,+BAAA3I,EAAA,gFAAQ/F,EAAR,uBAA0BqG,EAAIQ,SAAST,OAAOpG,IAA9C,2CAAH,sDAEN,SAAS2O,KACpB,IAAMxH,EAAW6B,YAASoF,IACpBQ,EAAa5F,YAAS,CAAEI,QAASqF,KACjCI,EAAa7F,YAAS,CAAEI,QAASsF,KAEvC,OACI,gCACI,cAAC,GAAD,CAAkBvH,SAAUA,EAAUO,OAAQkH,IAE9C,cAAC,IAAD,CACI1E,oBAAoB,EACpBC,cAAe,CACXkD,SAAU,CAAEyB,SAAU,GAAI7M,SAAU,IACpCsL,UAAW,CAAEuB,SAAU,GAAI7M,SAAU,IACrCmL,SAAUjG,EAASjB,KACnB6H,MAAO,eAEXnG,iBAAkB,kBACdC,KAAW,KAIfuC,SAAU,SAACjG,GACPsJ,QAAQC,IAAI,SAAUqB,KAAKC,MAAMD,KAAKE,UAAU9K,KAGhD,IADA,IACA,MAAmB,CADaA,EAAxBkJ,SAAwBlJ,EAAdoJ,WAClB,eAA0C,CAArC,IAAM2B,EAAI,KACPA,EAAKC,SACLP,EAAWtE,IAAI4E,EAAKC,QACpBD,EAAKC,YAAS5H,GAEd2H,EAAKJ,SAAS9O,KACd6O,EAAWvE,IAAI4E,EAAKJ,SAAS9O,IAC7BkP,EAAKJ,SAAW,MAxBhC,SA6BKM,QAMjB,IAAMA,GAAY,SAAC/O,GACf,IAAQ0N,EAAU1N,EAAM8D,OAAhB4J,MACFsB,EAAuB,aAAVtB,GAAkC,cAAVA,EACrCuB,EAAwB,cAAVvB,GAAmC,eAAVA,EACvCwB,EAAwB,gBAAVxB,EAEpB,OACI,sBAAKvO,UAAU,gBAAf,UACI,cAACsO,GAAD,eAAuBzN,IACvB,sBAAKb,UAAU,4BAAf,UACI,cAAC,GAAD,CACIQ,QAAIuH,EACJ0G,SAAoB,cAAVF,EACVjO,QAASuP,IAEb,cAAC,GAAD,CACIrP,QAAIuH,EACJ0G,SAAoB,eAAVF,EACVjO,QAASwP,OAGjB,cAACnB,GAAD,CAAerO,QAASyP,QChH9BC,GAAa,CACf,wIACA,uKACA,mQACA,iSACA,yJACA,0JAYE3P,GATc,CAChB,WACA,cACA,iBACA,cACA,iBACA,kBAGsBE,KACtB,SAACE,EAAKmM,GAAN,MAAa,CAAEpM,GAAImB,cAAUlB,MAAKN,MAAO6P,GAAWpD,OCbxD,SAASqD,KACL,MDeW,WACX,IAAQC,EAAaC,cAAbD,SACR,EAAgCxO,mBAASrB,GAAM,IAA/C,mBAAON,EAAP,KAAeqQ,EAAf,KACA,EAA8B1O,oBAAS,GAAvC,mBAAOpB,EAAP,KAAgB+P,EAAhB,KAEMC,EAAgBjO,uBAAY,kBAAMgO,GAAW,SAAC/P,GAAD,OAAcA,OAAU,IAe3E,OAZAiQ,qBAAU,WACN,IAAMjD,EAAOjN,GAAMmQ,QAAoC,SAACzQ,EAAQuN,GAG5D,OAFgB4C,EAASO,WAAWnD,EAAK7M,QACZV,GAAUA,EAAOU,IAAIsL,OAASuB,EAAK7M,IAAIsL,QACnDuB,EAAOvN,IACzB,MAECuN,GACA8C,EAAc9C,KAEnB,CAAC4C,IAEG,CAAE7P,SAAON,SAAQO,UAASgQ,iBCnCiBI,GAA1CrQ,EAAR,EAAQA,MAAON,EAAf,EAAeA,OAAQO,EAAvB,EAAuBA,QAASgQ,EAAhC,EAAgCA,cAC1BK,EAAgBrQ,EAAU,kBAAoB,GACpD,OACI,qCACI,cAACX,EAAD,CACIC,kBAAmB0Q,EACnBzQ,mBAAoBS,EACpBR,MAAOC,EAAOI,QAGlB,sBAAMH,UAAU,iBAAhB,SACI,sBAAKA,UAAU,6BAAf,UACI,cAAC,EAAD,CAAWD,OAAQA,EAAQM,MAAOA,EAAOC,QAASA,IAElD,qBAAKN,UAAW,qBAAuB2Q,EAAvC,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOrF,KAAK,WAAWxH,UAAWuH,KAClC,cAAC,IAAD,CAAOC,KAAK,cAAcxH,UAAWsF,KACrC,cAAC,IAAD,CAAOkC,KAAK,iBAAiBxH,eAAWiE,IACxC,cAAC,IAAD,CAAOuD,KAAK,cAAcxH,UAAWqL,KACrC,cAAC,IAAD,CACI7D,KAAK,yBACLxH,UAAWsF,KAEf,cAAC,IAAD,CAAUwH,KAAK,IAAIlQ,GAAG,0BASlD,IAMemQ,GANS,kBACpB,cAAC,IAAD,UACI,cAAC,GAAD,OChCOC,GAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFpBlK,EAAIf,UAAUE,QAAU,wBACxBa,EAAIf,UAAUG,eAAiB,IAE/BsL,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,SAM5Bb,O","file":"static/js/main.6ceccbf6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport interface HeaderProps {\r\n    onMenuButtonClick: () => void;\r\n    isMenuButtonActive: boolean;\r\n    title: string;\r\n}\r\n\r\nexport default function Header({\r\n    onMenuButtonClick,\r\n    isMenuButtonActive,\r\n    title,\r\n}: HeaderProps) {\r\n    const active = isMenuButtonActive ? ' active' : '';\r\n\r\n    return (\r\n        <header className='header container'>\r\n            <div className='header__content header-content'>\r\n                <div\r\n                    className={'header__menu-button menu-button' + active}\r\n                    onClick={onMenuButtonClick}\r\n                >\r\n                    Меню\r\n                </div>\r\n                <div className='header__title'>{title}</div>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface MenuItemInfo {\r\n    id: string;\r\n    label: string;\r\n    url: string;\r\n}\r\n\r\ninterface BlockMenuProps {\r\n    active: MenuItemInfo;\r\n    items: MenuItemInfo[];\r\n    visible?: boolean;\r\n}\r\n\r\nconst BlockMenu = ({ active, items, visible = true }: BlockMenuProps) => {\r\n    if (!visible) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className='main-content__menu'>\r\n            <div className='menu'>\r\n                {items.map(({ id, label, url }) => (\r\n                    <Link className='obscure-a' to={url} key={id}>\r\n                        <MenuItem label={label} active={id === active?.id} />\r\n                    </Link>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\ninterface MenuItemProps {\r\n    label: string;\r\n    active: boolean;\r\n    onClick?: JSX.IntrinsicElements['div']['onClick'];\r\n}\r\n\r\nconst MenuItem = ({ label, active, onClick }: MenuItemProps) => (\r\n    <div onClick={onClick} className={`menu__item menu-item ${active ? 'active' : ''}`}>\r\n        <div className='menu-item__text item-text'>\r\n            <span>{label}</span>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default BlockMenu;\r\n","export default interface ParamDataType {\r\n    id: number;\r\n    name: DataType;\r\n}\r\n\r\nexport type DataType = 'String' | 'Number' | 'Time' | 'Date' | 'Boolean' | 'Item';\r\n\r\nexport const DATE_FORMAT = 'YYYY-MM-DD';\r\n","import DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\nimport ru from 'date-fns/locale/ru';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nexport default function RusDatePicker(props: ReactDatePickerProps) {\r\n    const { locale = ru, dateFormat = 'dd.MM.yyyy', ...rest } = props;\r\n    return <DatePicker locale={locale} dateFormat={dateFormat} {...rest} />;\r\n}\r\n","import assert from 'assert';\r\nimport { nanoid } from 'nanoid/non-secure';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { useField, useFormikContext } from 'formik';\r\nimport RusDatePicker from '../../utils/RusDatePicker';\r\nimport FormItemProps from './FormItemProps';\r\nimport moment from 'moment';\r\n\r\ninterface DateItemExtraProps {\r\n    format?: string;\r\n}\r\n\r\nexport default function DateItem({\r\n    format = 'YYYY-MM-DD',\r\n    label,\r\n    onValueChange,\r\n    className,\r\n    labelClassName,\r\n    inputClassName,\r\n    ...props\r\n}: DateItemExtraProps & FormItemProps) {\r\n    assert(\r\n        !props.onChange,\r\n        `Field '${props.name}' must use onValueChange instead onChange`\r\n    );\r\n\r\n    const [cssId] = useState(nanoid);\r\n    const { setFieldValue } = useFormikContext();\r\n\r\n    // обычный onChange не работает\r\n    const [{ value, onChange: _, ...field }] = useField(props);\r\n    const { disabled } = props;\r\n\r\n    // если callback не задан, используется функция сохранения нового знаения в поле\r\n    // иначе вся отвественность на сохранении результата ложится на callback\r\n    const sendValue: typeof onValueChange = onValueChange ?? setFieldValue;\r\n    const onDateChange: (date: Date | null) => void = useCallback(\r\n        (date) => sendValue(field.name, moment(date).format(format)),\r\n        [field.name, format, sendValue]\r\n    );\r\n\r\n    return (\r\n        <div className={className + ' form__field'}>\r\n            <label htmlFor={cssId} className={labelClassName + ' form-label'}>\r\n                {label}\r\n            </label>\r\n            <RusDatePicker\r\n                {...field}\r\n                id={cssId}\r\n                className={inputClassName + ' form-input'}\r\n                selected={new Date(moment(value).format(format))}\r\n                onChange={onDateChange}\r\n                disabled={disabled}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import assert from 'assert';\r\nimport { nanoid } from 'nanoid/non-secure';\r\nimport React, { useCallback, useState } from 'react';\r\nimport { useField } from 'formik';\r\nimport FormItemProps from './FormItemProps';\r\n\r\ninterface SelectItemExtraProps {\r\n    placeholder?: string;\r\n}\r\n\r\nfunction SelectItem({\r\n    placeholder = '<не задано>',\r\n    label,\r\n    onValueChange,\r\n    className,\r\n    labelClassName,\r\n    inputClassName,\r\n    ...props\r\n}: SelectItemExtraProps & FormItemProps) {\r\n    assert(\r\n        !props.onChange,\r\n        `Field '${props.name}' must use onValueChange instead onChange`\r\n    );\r\n\r\n    const [cssId] = useState(nanoid);\r\n    const [{ value = SelectItem.UNSELECTED_VALUE, onChange, ...field }] = useField(props);\r\n    const { children, disabled } = props;\r\n\r\n    const onSelectChange: React.ChangeEventHandler<HTMLSelectElement> = useCallback(\r\n        (e) =>\r\n            onValueChange ? onValueChange(e.target.name, e.target.value) : onChange(e),\r\n        [onValueChange, onChange]\r\n    );\r\n\r\n    return (\r\n        <div className={className + ' form__field'}>\r\n            <label htmlFor={cssId} className={labelClassName + ' form-label'}>\r\n                {label}\r\n            </label>\r\n            <select\r\n                {...field}\r\n                id={cssId}\r\n                className={inputClassName + ' form-input'}\r\n                value={value}\r\n                disabled={disabled || React.Children.count(children) === 0}\r\n                onChange={onSelectChange}\r\n            >\r\n                <option hidden disabled value={SelectItem.UNSELECTED_VALUE}>\r\n                    {placeholder}\r\n                </option>\r\n                {children}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nSelectItem.UNSELECTED_VALUE = '__UNSELECTED__VALUE__';\r\n\r\nexport default SelectItem;\r\n","import React from 'react';\r\nimport { CompositeWithCssClass } from '../FormItemProps';\r\n\r\nexport default function withCompositeCssClass<P extends CompositeWithCssClass>(\r\n    Component: React.ComponentType<P>,\r\n    classNamePrefix: string\r\n) {\r\n    const wrap = `${classNamePrefix}__item`;\r\n    const label = `${classNamePrefix}__label`;\r\n    const input = `${classNamePrefix}__input`;\r\n\r\n    return (props: P) => (\r\n        <Component\r\n            {...props}\r\n            className={`${wrap} ${props.className}`}\r\n            labelClassName={`${label} ${props.labelClassName}`}\r\n            inputClassName={`${input} ${props.inputClassName}`}\r\n        />\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { ErrorMessage } from 'formik';\r\n\r\nconst withError = <P extends { name: string }>(\r\n    Component: React.ComponentType<P>,\r\n    errClass = 'field-error',\r\n    htmlTag = 'div'\r\n) => (props: P) => (\r\n    <>\r\n        <Component {...props} />\r\n        <ErrorMessage name={props.name} component={htmlTag} className={errClass} />\r\n    </>\r\n);\r\n\r\nexport default withError;\r\n","import React from 'react';\r\nimport { DATE_FORMAT } from '../../../models/ParamDataType';\r\nimport DateItem from '../Items/DateItem';\r\nimport SelectItem from '../Items/SelectItem';\r\nimport TextItem from '../Items/TextItem';\r\nimport withCompositeCssClass from '../Items/hoc/withCompositeCssClass';\r\nimport withError from '../Items/hoc/withError';\r\n\r\nexport const TextField = withError(withCompositeCssClass(TextItem, 'strain-form'), 'form-error');\r\n\r\nconst FormattedDate: typeof DateItem = (props) => (\r\n    <DateItem {...props} format={DATE_FORMAT} />\r\n);\r\n\r\nexport const DateField = withError(withCompositeCssClass(FormattedDate, 'strain-form'), 'form-error');\r\n\r\nexport const SelectField = withError(\r\n    withCompositeCssClass(SelectItem, 'strain-form'),\r\n    'form-error'\r\n) as typeof SelectItem;\r\nSelectField.UNSELECTED_VALUE = SelectItem.UNSELECTED_VALUE;\r\n","import assert from 'assert';\r\nimport { useField } from 'formik';\r\nimport { nanoid } from 'nanoid/non-secure';\r\nimport React, { useCallback, useState } from 'react';\r\nimport FormItemProps from './FormItemProps';\r\n\r\nexport default function TextItem({\r\n    label,\r\n    onValueChange,\r\n    className,\r\n    labelClassName,\r\n    inputClassName,\r\n    ...props\r\n}: FormItemProps) {\r\n    assert(\r\n        !props.onChange,\r\n        `Field '${props.name}' must use onValueChange instead onChange`\r\n    );\r\n\r\n    const [cssId] = useState(nanoid);\r\n    const [{ onChange, ...field }] = useField(props);\r\n    const { placeholder, type, disabled } = props;\r\n\r\n    const onTextChange: React.ChangeEventHandler<HTMLInputElement> = useCallback(\r\n        (e) =>\r\n            onValueChange ? onValueChange(e.target.name, e.target.value) : onChange(e),\r\n        [onValueChange, onChange]\r\n    );\r\n\r\n    return (\r\n        <div className={className + ' form__field'}>\r\n            <label htmlFor={cssId} className={labelClassName + ' form-label'}>\r\n                {label}\r\n            </label>\r\n            <input\r\n                {...field}\r\n                id={cssId}\r\n                className={inputClassName + ' form-input'}\r\n                placeholder={placeholder}\r\n                type={type}\r\n                disabled={disabled}\r\n                onChange={onTextChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport FacticalParameter from '../../../models/FacticalParameter';\r\nimport { TextField, SelectField, DateField } from './Fields';\r\n\r\nexport interface ParamFieldProps {\r\n    name: string;\r\n    param: FacticalParameter;\r\n}\r\n\r\nexport default function ParamField({ name, param }: ParamFieldProps) {\r\n    let Component = TextField;\r\n    switch (param.formalParameter.parameterDataType.name) {\r\n        case 'Date':\r\n        case 'Time':\r\n            Component = DateField;\r\n            break;\r\n        case 'Item':\r\n            Component = SelectField;\r\n            break;\r\n    }\r\n\r\n    return <Component label={param.formalParameter.name} name={`${name}.value`} />;\r\n}\r\n","import React from 'react';\r\n\r\nexport interface PropertyItemProps {\r\n    title: string;\r\n    children: React.ReactNode;\r\n}\r\n\r\nfunction PropertyItem(props: PropertyItemProps) {\r\n    return (\r\n        <div className='property'>\r\n            <div className='property__title'>\r\n                <span>{props.title}</span>\r\n            </div>\r\n            {props.children}\r\n            <div className='property__buttons-block'>\r\n                <button className='property__delete-button delete-button'>\r\n                    Удалить свойство\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PropertyItem;\r\n","import React from 'react';\r\nimport { FieldArray, useFormikContext } from 'formik';\r\nimport StrainSavingFormValues from './StrainSavingFormValues';\r\nimport ParamField from './ParamField';\r\nimport PropertyItem from './PropertyItem';\r\n\r\nexport interface PropertiesListProps {\r\n    propType: keyof StrainSavingFormValues['properties'];\r\n}\r\n\r\nexport default function PropertiesList({ propType: type }: PropertiesListProps) {\r\n    const { values } = useFormikContext<StrainSavingFormValues>();\r\n\r\n    return (\r\n        <FieldArray name={type}>\r\n            {(propHelpers) =>\r\n                values.properties[type].map((prop, propIdx) => {\r\n                    const ungroupedField = `properties.${type}[${propIdx}].ungrouped`;\r\n                    const groupesField = `properties.${type}[${propIdx}].groups`;\r\n\r\n                    return (\r\n                        <PropertyItem key={prop.id} title={prop.name}>\r\n                            {prop.ungrouped && (\r\n                                <FieldArray name={ungroupedField}>\r\n                                    {(ungroupedHelpers) =>\r\n                                        prop.ungrouped?.map(\r\n                                            (param, paramIdx) => (\r\n                                                <ParamField\r\n                                                    key={param.id ?? -paramIdx - 1}\r\n                                                    name={`${ungroupedField}[${paramIdx}]`}\r\n                                                    param={param}\r\n                                                />\r\n                                            )\r\n                                        )\r\n                                    }\r\n                                </FieldArray>\r\n                            )}\r\n\r\n                            {prop.groups && (\r\n                                <FieldArray name={groupesField}>\r\n                                    {(groupesHelpers) =>\r\n                                        prop.groups?.map((group, groupIdx) => (\r\n                                            <div key={group.groupId ?? -groupIdx - 1}>\r\n                                                {group.parameters.map(\r\n                                                    (param, paramIdx) => (\r\n                                                        <ParamField\r\n                                                            key={\r\n                                                                param.id ?? -paramIdx - 1\r\n                                                            }\r\n                                                            name={`${groupesField}[${groupIdx}].parameters[${paramIdx}]`}\r\n                                                            param={param}\r\n                                                        />\r\n                                                    )\r\n                                                )}\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                </FieldArray>\r\n                            )}\r\n                        </PropertyItem>\r\n                    );\r\n                })\r\n            }\r\n        </FieldArray>\r\n    );\r\n}\r\n","import axios from 'axios';\r\nimport FormalParameter from '../models/FormalParameter';\r\nimport Genus from '../models/Genus';\r\nimport ParamDataType from '../models/ParamDataType';\r\nimport FormalProperty from '../models/Property/FormalProperty';\r\nimport Strain from '../models/Strain';\r\nimport StrainType from '../models/StrainType';\r\n\r\nconst axiosInst = axios.create();\r\n\r\nconst apiConfig = {\r\n    get baseURL() {\r\n        return axiosInst.defaults.baseURL;\r\n    },\r\n    set baseURL(url: string | undefined) {\r\n        axiosInst.defaults.baseURL = url;\r\n    },\r\n    defaultTimeout: 30000,\r\n};\r\n\r\nconst timeoutMsg = (timeout: number) => `истекло время ожидания (${timeout / 1000}с)`;\r\nconst getConfig = (timeout: number) => ({\r\n    timeout,\r\n    timeoutErrorMessage: timeoutMsg(timeout),\r\n});\r\n\r\nclass Generator {\r\n    static get<T>(url: string) {\r\n        return async (timeout: number = apiConfig.defaultTimeout) => {\r\n            const response = await axiosInst.get<T>(url, getConfig(timeout));\r\n            return response.data;\r\n        };\r\n    }\r\n    static getById<T>(url: (id: number) => string) {\r\n        return async (id: number, timeout: number = apiConfig.defaultTimeout) => {\r\n            const response = await axiosInst.get<T>(url(id), getConfig(timeout));\r\n            return response.data;\r\n        };\r\n    }\r\n    static post<T, V = T>(url: string) {\r\n        return async (value: V, timeout: number = apiConfig.defaultTimeout) => {\r\n            const response = await axiosInst.post<T>(url, value, getConfig(timeout));\r\n            return response.data;\r\n        };\r\n    }\r\n    static deleteById<T>(url: (id: number) => string) {\r\n        return async (id: number, timeout: number = apiConfig.defaultTimeout) => {\r\n            const response = await axiosInst.delete<T>(url(id), getConfig(timeout));\r\n            return response.data;\r\n        };\r\n    }\r\n}\r\n\r\nconst strain = {\r\n    getAll: Generator.get<Strain[]>('/strain'),\r\n    get: Generator.getById<Strain>((id) => `/strain/${id}`),\r\n    post: Generator.post<Strain>('/strain'),\r\n    delete: Generator.deleteById<Strain>((id) => `/strain/${id}`),\r\n};\r\n\r\nconst genus = {\r\n    getAll: Generator.get<Genus[]>('/strain-genus'),\r\n    getTypes: Generator.getById<StrainType[]>((id) => `/strain-genus/${id}/types`),\r\n    post: Generator.post<Genus>('/strain-genus'),\r\n    delete: Generator.deleteById<Genus>((id) => `/strain-genus/${id}`),\r\n};\r\n\r\nconst type = {\r\n    getAll: Generator.get<StrainType[]>('/strain-type'),\r\n    getStrains: Generator.getById<StrainType[]>((id) => `/strain-type/${id}/strains`),\r\n    post: Generator.post<StrainType>('/strain-type'),\r\n    delete: Generator.deleteById<StrainType>((id) => `/strain-type/${id}`),\r\n};\r\n\r\nconst property = {\r\n    getAll: Generator.get<FormalProperty[]>('/property'),\r\n    getAllWithParameters: Generator.get<FormalProperty[]>('/property/with-params'),\r\n    get: Generator.getById<FormalProperty>((id) => `/property/${id}`),\r\n    post: Generator.post<FormalProperty>('/property'),\r\n    postWithParams: Generator.post<FormalProperty>('/property/with-params'),\r\n    delete: Generator.deleteById<FormalProperty>((id) => `/property/${id}`),\r\n};\r\n\r\nconst dataType = {\r\n    getAll: Generator.get<ParamDataType[]>('/data-type'),\r\n};\r\n\r\nconst formalParameter = {\r\n    getAll: Generator.get<FormalParameter[]>('/formal-parameter'),\r\n    get: Generator.getById<FormalParameter>((id) => `/formal-parameter/${id}`),\r\n    post: Generator.post<FormalParameter>('/formal-parameter'),\r\n    delete: Generator.deleteById<FormalParameter>((id) => `/formal-parameter/${id}`),\r\n    isUsing: Generator.getById<boolean>((id) => `/formal-parameter/in-use/${id}`),\r\n    isListUsing: Generator.post<{ [key: number]: boolean }, number[]>(\r\n        '/formal-parameter/in-use-batch'\r\n    ),\r\n};\r\n\r\nconst API = {\r\n    strain,\r\n    genus,\r\n    type,\r\n    property,\r\n    dataType,\r\n    formalParameter,\r\n\r\n    apiConfig,\r\n};\r\n\r\nexport default API;\r\n","import { useAsync } from 'react-async';\r\nimport { useParams } from 'react-router-dom';\r\nimport Strain from '../../../models/Strain';\r\nimport API from '../../../utils/API';\r\nimport { AnyObj } from '../../../utils/utils';\r\n\r\nconst download = async ({ strainId }: { strainId?: string } & AnyObj) => {\r\n    const id = strainId ? Number.parseInt(strainId, 10) : undefined;\r\n    return Promise.all([\r\n        API.genus.getAll(),\r\n        API.type.getAll(),\r\n        id ? API.strain.get(id) : undefined,\r\n    ]);\r\n};\r\n\r\nexport const useDownloadData = () => {\r\n    const { strainId } = useParams<{ strainId?: string }>();\r\n    const asyncState = useAsync(download, { strainId, watch: strainId });\r\n    return { isStrainExist: !!strainId, ...asyncState };\r\n};\r\n\r\nconst upload = ([strain]: Strain[]) => API.strain.post(strain);\r\n\r\nexport const useUploadStrain = () => useAsync({ deferFn: upload });\r\n","import * as Yup from 'yup';\r\nimport { SelectField } from './Fields';\r\n\r\nconst requiredMsg = 'обязательное поле';\r\n\r\nconst validationSchema = Yup.object({\r\n    genus: Yup.object().shape({\r\n        name: Yup.string()\r\n            .notOneOf([SelectField.UNSELECTED_VALUE], requiredMsg)\r\n            .required(requiredMsg),\r\n    }),\r\n    type: Yup.object()\r\n        .shape({\r\n            name: Yup.string()\r\n                .notOneOf([SelectField.UNSELECTED_VALUE], requiredMsg)\r\n                .required(requiredMsg),\r\n        })\r\n        .required(requiredMsg),\r\n    name: Yup.string().required(requiredMsg),\r\n    dateReceiving: Yup.date().required(requiredMsg),\r\n    collectionIndex: Yup.string().required(requiredMsg),\r\n    source: Yup.string().required(requiredMsg),\r\n    obtainingMethod: Yup.string().required(requiredMsg),\r\n    creator: Yup.string().notRequired(),\r\n    dateAdded: Yup.date().required(requiredMsg),\r\n});\r\n\r\nexport default validationSchema;\r\n","interface FormErrorMessageProps {\r\n    download: { isPending: boolean; error?: Error };\r\n    upload: { isPending: boolean; error?: Error };\r\n}\r\n\r\nconst FormErrorMessage = ({ download, upload }: FormErrorMessageProps) => (\r\n    <>\r\n        {download.isPending && <div className='loading'>Загрузка данных...</div>}\r\n        \r\n        {upload.isPending && <div className='loading'>Сохранение данных...</div>}\r\n\r\n        {download.error && (\r\n            <div className='field-error'>\r\n                Ошибка при получении данных: {download.error.message}\r\n            </div>\r\n        )}\r\n\r\n        {upload.error && (\r\n            <div className='field-error'>\r\n                Ошибка при отправке данных: {upload.error.message}\r\n            </div>\r\n        )}\r\n    </>\r\n);\r\n\r\nexport default FormErrorMessage;\r\n","import React from 'react';\r\nimport { Form, Formik } from 'formik';\r\nimport moment from 'moment';\r\nimport { DATE_FORMAT } from '../../../models/ParamDataType';\r\nimport { DateField, SelectField, TextField } from './Fields';\r\nimport PropertiesList from './PropertiesList';\r\nimport StrainSavingFormValues from './StrainSavingFormValues';\r\nimport { useDownloadData, useUploadStrain } from './BackendDataHooks';\r\nimport validationSchema from './validationSchema';\r\nimport FormErrorMessage from '../Items/FormErrorMessage';\r\n\r\nexport default function StrainSavingForm() {\r\n    const download = useDownloadData();\r\n    const upload = useUploadStrain();\r\n\r\n    const [genusList, typeList, strain] = download.data ?? [[], [], undefined];\r\n\r\n    if (strain) {\r\n        strain.properties.sort((p1, p2) => p1.id! - p2.id!);\r\n        strain.properties.forEach((prop) => {\r\n            prop.ungrouped?.sort((p1, p2) => p1.id! - p2.id!);\r\n            prop.groups?.sort((g1, g2) => g1.groupId! - g2.groupId!);\r\n            prop.groups?.forEach((group) =>\r\n                group.parameters.sort((p1, p2) => p1.id! - p2.id!)\r\n            );\r\n        });\r\n    }\r\n\r\n    let initValues: StrainSavingFormValues;\r\n    if (strain) {\r\n        const { properties, ...rest } = strain;\r\n        initValues = {\r\n            ...rest,\r\n            genus: strain.type.genus,\r\n            properties: {\r\n                bio: properties.filter((prop) => !prop.isNote) ?? [],\r\n                note: properties.filter((prop) => prop.isNote) ?? [],\r\n            },\r\n        };\r\n    } else {\r\n        const today = moment().format(DATE_FORMAT);\r\n        initValues = {\r\n            name: '',\r\n            dateReceiving: today,\r\n            collectionIndex: '',\r\n            source: '',\r\n            obtainingMethod: '',\r\n            dateAdded: today,\r\n            properties: { bio: [], note: [] },\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div className='strain-adding'>\r\n            <FormErrorMessage download={download} upload={upload} />\r\n            <Formik<StrainSavingFormValues>\r\n                enableReinitialize={true}\r\n                initialValues={initValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={({ genus: _, type, properties, ...rest }) => {\r\n                    const strainData = {\r\n                        type: type!,\r\n                        properties: [...properties.bio, ...properties.note],\r\n                        ...rest,\r\n                    };\r\n                    upload.run(strainData);\r\n                }}\r\n            >\r\n                {({ values, setFieldValue }) => {\r\n                    // В случае, когда Род и Вид штамма созданы только что (не содержатся в базе), у них нет id.\r\n                    // Тогда, если выбран Род без id, то надо вывести Вид без id\r\n                    const curTypeList = typeList.filter(({ genus }) => {\r\n                        const curGenusId = values.genus?.id;\r\n                        return (!genus.id && !curGenusId) || genus.id === curGenusId;\r\n                    });\r\n\r\n                    const disabled = !download.isFulfilled || upload.isPending;\r\n\r\n                    return (\r\n                        <Form className='strain-form form--position-block-center'>\r\n                            <fieldset disabled={disabled}>\r\n                                <div className='strain-form__general-info'>\r\n                                    <div className='strain-form__base-field base-field'>\r\n                                        <SelectField\r\n                                            name='genus.name'\r\n                                            label='Род'\r\n                                            onValueChange={(_name, value) => {\r\n                                                const genus = genusList.find(\r\n                                                    (genus) => genus.name === value\r\n                                                );\r\n                                                setFieldValue('genus', genus);\r\n                                                setFieldValue('type', undefined);\r\n                                            }}\r\n                                        >\r\n                                            {genusList.map((genus) => (\r\n                                                <option key={genus.id} value={genus.name}>\r\n                                                    {genus.name}\r\n                                                </option>\r\n                                            ))}\r\n                                        </SelectField>\r\n                                        <div className='base-field__buttons-block'>\r\n                                            <a\r\n                                                href='#iw-modal-1'\r\n                                                className='iw-modal-btn base-field__add-button add-button'\r\n                                            >\r\n                                                +\r\n                                            </a>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className='strain-form__base-field base-field'>\r\n                                        <SelectField\r\n                                            name='type.name'\r\n                                            label='Вид'\r\n                                            onValueChange={(_name, value) => {\r\n                                                const type = curTypeList.find(\r\n                                                    (type) => type.name === value\r\n                                                );\r\n                                                setFieldValue('type', type);\r\n                                            }}\r\n                                        >\r\n                                            {curTypeList.map((type) => (\r\n                                                <option key={type.id} value={type.name}>\r\n                                                    {type.name}\r\n                                                </option>\r\n                                            ))}\r\n                                        </SelectField>\r\n                                        <div className='base-field__buttons-block'>\r\n                                            <a\r\n                                                href='#iw-modal-2'\r\n                                                className='iw-modal-btn base-field__add-button add-button'\r\n                                            >\r\n                                                +\r\n                                            </a>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* часть наименования */}\r\n                                    <TextField label='Исходный индекс' name='name' />\r\n                                    {/* часть наименования */}\r\n                                    <DateField\r\n                                        label='Дата получения'\r\n                                        name='dateReceiving'\r\n                                        disabled={disabled}\r\n                                    />\r\n                                    {/* каталожный индекс */}\r\n                                    <TextField\r\n                                        label='Индекс штаммов'\r\n                                        name='collectionIndex'\r\n                                    />\r\n                                    {/* происхождение */}\r\n                                    <TextField label='Происхождение' name='source' />\r\n                                    {/* способ получения */}\r\n                                    <TextField\r\n                                        label='Способ получения'\r\n                                        name='obtainingMethod'\r\n                                    />\r\n                                </div>\r\n\r\n                                <PropertiesList propType='bio' />\r\n                                <PropertiesList propType='note' />\r\n\r\n                                {/* без логиги */}\r\n                                <div className='add-property-block'>\r\n                                    <label\r\n                                        className='add-property-block__label'\r\n                                        htmlFor='add-property-block__select'\r\n                                    >\r\n                                        Все свойства\r\n                                    </label>\r\n                                    <select\r\n                                        className='add-property-block__select'\r\n                                        name='property-data'\r\n                                        id='add-property-block__select'\r\n                                    >\r\n                                        <option value='1'>свойство 1</option>\r\n                                        <option value='2'>свойство 2</option>\r\n                                        <option value='3'>свойство 3</option>\r\n                                        <option value='4'>свойство 4</option>\r\n                                    </select>\r\n                                    <button className='add-property-block__button add-button'>\r\n                                        добавить\r\n                                    </button>\r\n                                </div>\r\n                                {/* без логиги */}\r\n\r\n                                <div className='strain-adding__buttons form-buttons'>\r\n                                    <button\r\n                                        type='submit'\r\n                                        className='form-buttons__submit-button form-button submit-button add-button'\r\n                                    >\r\n                                        Сохранить\r\n                                    </button>\r\n                                    <button\r\n                                        type='button'\r\n                                        className='form-buttons__cancel-button form-button cancel-button delete-button'\r\n                                    >\r\n                                        Отмена\r\n                                    </button>\r\n                                </div>\r\n                            </fieldset>\r\n                        </Form>\r\n                    );\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport {Link, Route, Switch, useParams, useRouteMatch} from 'react-router-dom';\r\nimport API from '../../utils/API';\r\nimport {useAsync} from 'react-async';\r\nimport {join} from 'path';\r\n\r\nexport default function MicroorganismsCatalog() {\r\n    const {path} = useRouteMatch();\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path={path}>\r\n                <GenusList/>\r\n            </Route>\r\n            <Route exact path={join(path, ':genusId')}>\r\n                <TypeList/>\r\n            </Route>\r\n            <Route exact path={join(path, ':genusId/:typeId')}>\r\n                <StrainList/>\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}\r\n\r\ninterface UrlParams {\r\n    genusId?: string;\r\n    typeId?: string;\r\n}\r\n\r\nfunction GenusList() {\r\n    const {url} = useRouteMatch();\r\n    const fetchData = useCallback(() => API.genus.getAll(), [])\r\n    const {data, error, isPending} = useAsync(fetchData)\r\n\r\n    if (isPending) {\r\n        return <p>Загрузка данных...</p>;\r\n    }\r\n    if (error) {\r\n        return <p>`Ошибка при получении данных: ${error.message}`</p>;\r\n    }\r\n\r\n    const genusList = data!;\r\n\r\n    const {length: listNumber} = genusList;\r\n    return (\r\n        <div className=\"genus-list-block\">\r\n            <ul className=\"genus-list\">\r\n                {genusList.map((genus) => (\r\n                    <li className=\"genus-list__item genus-item\" key={genus.id}>\r\n                        <Link className=\"genus-list__link genus-link\" to={join(url, genus.id!.toString())}>\r\n                            <span\r\n                                className=\"genus-link__name genus-name\">{genus.name.length >= 50 ?\r\n                                genus.name.substr(1, 49) + \"...\" : genus.name}</span>\r\n                            <span className=\"genus-link__number genus-strains-number\">{listNumber}</span>\r\n                        </Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction TypeList() {\r\n    const {url} = useRouteMatch();\r\n    const genusId = Number(useParams<UrlParams>().genusId);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const fetchData = useCallback(() => API.genus.getTypes(genusId), [genusId])\r\n    const {data, error, isPending} = useAsync(fetchData)\r\n\r\n    if (isPending) {\r\n        return <p>Загрузка данных...</p>;\r\n    }\r\n    if (error) {\r\n        return <p>`Ошибка при получении данных: ${error.message}`</p>;\r\n    }\r\n\r\n    const typeList = data!;\r\n\r\n    return (\r\n        <div className=\"types-list-block\">\r\n            <ul className=\"types-list big-list\">\r\n                {typeList\r\n                    .map((type) => (\r\n                        <li className=\"types-list__item big-list__item\" key={type.id}>\r\n                            <Link className=\"types-list__link types-link\" to={join(url, type.id!.toString())}>\r\n                                {type.name}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction StrainList() {\r\n\r\n    const typeId = Number(useParams<UrlParams>().typeId);\r\n    const fetchData = useCallback(() => API.type.getStrains(typeId), [typeId])\r\n    const {data, error, isPending} = useAsync(fetchData)\r\n\r\n    if (isPending) {\r\n        return <p>Загрузка данных...</p>;\r\n    }\r\n    if (error) {\r\n        return <p>`Ошибка при получении данных: ${error.message}`</p>;\r\n    }\r\n\r\n    const strainList = data!;\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"strains-list big-list\">\r\n                {strainList\r\n                    .map((strain) => (\r\n                        <li className=\"big-list__item strains-list__item\" key={strain.id}>\r\n                            <Link className=\"strains-list__link strains-link\"\r\n                                  to={join('/strain', strain.id!.toString(), 'edit')}>\r\n                                {strain.name}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n","import React, { useCallback } from 'react';\r\n\r\ninterface ButtonProps {\r\n    name?: string;\r\n    type?: 'button' | 'submit';\r\n    disabled?: boolean;\r\n    className?: string;\r\n    onClick?: (name?: string) => void;\r\n    label: string;\r\n    useDisabledClass?: boolean\r\n}\r\n\r\nconst ButtonItem = ({\r\n    name,\r\n    className,\r\n    disabled,\r\n    onClick,\r\n    label,\r\n    type = 'button',\r\n    useDisabledClass = true,\r\n}: ButtonProps) => {\r\n    const onClickCallback = useCallback(() => onClick?.(name), [onClick, name]);\r\n    return (\r\n        <button\r\n            name={name}\r\n            disabled={disabled}\r\n            onClick={onClickCallback}\r\n            type={type}\r\n            className={`${className} ${useDisabledClass && disabled ? 'disabled-block' : ''}`}\r\n        >\r\n            {label}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default ButtonItem;\r\n","import React, { useCallback } from 'react';\r\nimport { useFormikContext } from 'formik';\r\nimport assert from 'assert';\r\n\r\nexport interface ListProps {\r\n    name: string;\r\n    value?: string;\r\n    valueList: string[];\r\n    children: React.ReactNode;\r\n    className?: string;\r\n    onSelect?: (name: string, value: string) => void;\r\n}\r\n\r\nexport default function List(props: ListProps) {\r\n    assert(React.Children.count(props.children) === props.valueList.length);\r\n\r\n    const { name, value, valueList, className, children, onSelect } = props;\r\n\r\n    return (\r\n        <div className={className}>\r\n            {React.Children.map(children, (child, i) => (\r\n                <ListChild\r\n                    name={name}\r\n                    value={valueList[i]}\r\n                    selected={valueList[i] === value}\r\n                    onClick={onSelect}\r\n                >\r\n                    {child}\r\n                </ListChild>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface ListChildProps {\r\n    name: string;\r\n    value: string;\r\n    disabled?: boolean;\r\n    selected?: boolean;\r\n    onClick?: (name: string, value: string) => void;\r\n    children?: React.ReactNode;\r\n}\r\n\r\nfunction ListChild(props: ListChildProps) {\r\n    const { name, value, selected, disabled, onClick, children } = props;\r\n    const { setFieldValue } = useFormikContext();\r\n\r\n    const className = `list-item ${selected ? 'active' : ''}`;\r\n    const action = useCallback(\r\n        () => disabled || (onClick ?? setFieldValue)(name, value),\r\n        [name, value, disabled, onClick, setFieldValue]\r\n    );\r\n\r\n    return (\r\n        <div className={className} onClick={action}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport { Form } from 'formik';\r\nimport List from '../../Items/List';\r\nimport ButtonItem from '../../Items/ButtonItem';\r\n\r\ninterface PrimaryDataListProps {\r\n    name: string;\r\n    cssPrefix: string;\r\n\r\n    title: string;\r\n    deleteButtonLabel: string;\r\n\r\n    value?: string;\r\n    itemList?: { id?: number; name: string; isUsing: boolean }[];\r\n\r\n    onSelect: (name: string, value: string) => void;\r\n    onDelete: (name: string, value?: string) => void;\r\n}\r\n\r\nexport default function PrimaryDataList(props: PrimaryDataListProps) {\r\n    const { name, cssPrefix, title, deleteButtonLabel, value, itemList } = props;\r\n    const { onSelect, onDelete } = props;\r\n\r\n    const disableDeleteBtn = useMemo(\r\n        () => itemList?.find((item) => item.id?.toString() === value)?.isUsing ?? true,\r\n        [itemList, value]\r\n    );\r\n\r\n    const onDeleteCallback = useCallback(\r\n        () => onDelete(name, value),\r\n        [onDelete, value, name]\r\n    );\r\n\r\n    const className = `${cssPrefix}-list__property-item list-item`;\r\n\r\n    return (\r\n        <Form>\r\n            <div className='property-edit__property-parameters property-edit--list'>\r\n                <div className={`${cssPrefix}-list list`}>\r\n                    <div className={`${cssPrefix}-list__title list-title`}>\r\n                        <span>{title}</span>\r\n                    </div>\r\n                    <List\r\n                        className={`${cssPrefix}-list__data list-data`}\r\n                        name={name}\r\n                        value={value}\r\n                        valueList={(itemList ?? []).map(({ id }) => id!.toString())}\r\n                        onSelect={onSelect}\r\n                    >\r\n                        {itemList?.map(({ id, name, isUsing }) => (\r\n                            <div\r\n                                key={id}\r\n                                className={className}\r\n                                style={isUsing ? { color: 'gray' } : undefined}\r\n                            >\r\n                                <span>{name}</span>\r\n                            </div>\r\n                        ))}\r\n                    </List>\r\n                </div>\r\n                <ButtonItem\r\n                    type='submit'\r\n                    label={deleteButtonLabel}\r\n                    disabled={disableDeleteBtn}\r\n                    useDisabledClass={false}\r\n                    className='delete-list-item-button delete-button'\r\n                    onClick={onDeleteCallback}\r\n                />\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n","import React, { useCallback } from 'react';\r\nimport { FormikProps } from 'formik/dist/types';\r\nimport PrimaryDataList from './PrimaryDataList';\r\nimport PropertyEditFormValues from '../PropertyEditFormValues';\r\n\r\ntype PropertyListProps = FormikProps<PropertyEditFormValues> & {\r\n    name: string;\r\n    paramListName: string;\r\n};\r\n\r\nexport default function PropertyList(props: PropertyListProps) {\r\n    const {\r\n        name,\r\n        paramListName,\r\n        values: { propList, propInfo },\r\n        setFieldValue,\r\n    } = props;\r\n\r\n    const onSelect = useCallback(\r\n        (name: string, value: string) => {\r\n            const id = parseInt(value);\r\n            if (propInfo.selected.id !== id) {\r\n                setFieldValue(name, id);\r\n                setFieldValue(paramListName, undefined);\r\n            }\r\n        },\r\n        [paramListName, propInfo, setFieldValue]\r\n    );\r\n\r\n    const onDelete = useCallback(\r\n        (name: string, value?: string) =>\r\n            setFieldValue('propInfo.removing.id', value && parseInt(value)),\r\n        [setFieldValue]\r\n    );\r\n\r\n    return (\r\n        <PrimaryDataList\r\n            name={name}\r\n            cssPrefix='properties'\r\n            title='Свойства'\r\n            deleteButtonLabel='Удалить свойство'\r\n            value={propInfo.selected.id?.toString()}\r\n            itemList={propList}\r\n            onSelect={onSelect}\r\n            onDelete={onDelete}\r\n        />\r\n    );\r\n}\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport { FormikProps } from 'formik/dist/types';\r\nimport PrimaryDataList from './PrimaryDataList';\r\nimport PropertyEditFormValues from '../PropertyEditFormValues';\r\n\r\ntype ParameterListProps = FormikProps<PropertyEditFormValues> & {\r\n    name: string;\r\n};\r\n\r\nexport default function ParameterList(props: ParameterListProps) {\r\n    const {\r\n        name,\r\n        values: { propList, propInfo, paramInfo },\r\n        setFieldValue,\r\n    } = props;\r\n\r\n    const itemList = useMemo(() => {\r\n        const prop = propList?.find((prop) => prop.id === propInfo.selected.id);\r\n        return [\r\n            ...(prop?.ungrouped ?? []),\r\n            ...(prop?.groups ?? []).flatMap((group) => group.parameters),\r\n        ];\r\n    }, [propList, propInfo.selected.id]);\r\n\r\n    const onSelect = useCallback(\r\n        (name: string, value: string) => setFieldValue(name, parseInt(value)),\r\n        [setFieldValue]\r\n    );\r\n\r\n    const onDelete = useCallback(\r\n        (name: string, value?: string) => {\r\n            console.log('param del', value)\r\n            setFieldValue('paramInfo.removing.id', value && parseInt(value));\r\n        },\r\n        [setFieldValue]\r\n    );\r\n\r\n    return (\r\n        <PrimaryDataList\r\n            name={name}\r\n            cssPrefix='parameters'\r\n            title='Параметры'\r\n            deleteButtonLabel='Удалить параметр'\r\n            value={paramInfo.selected.id?.toString()}\r\n            itemList={itemList}\r\n            onSelect={onSelect}\r\n            onDelete={onDelete}\r\n        />\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { FormikProps } from 'formik';\r\nimport ButtonItem from '../../Items/ButtonItem';\r\nimport PropertyEditFormValues from '../PropertyEditFormValues';\r\nimport PropertyList from './PropertyList';\r\nimport ParameterList from './ParameterList';\r\n\r\nconst btnClassName = (part: string, isActive: boolean) => {\r\n    const active = isActive ? 'active' : '';\r\n    return `form-menu__${part}-button form-menu__button ${active}`;\r\n};\r\n\r\nexport default function PropertyEditBlock(props: FormikProps<PropertyEditFormValues>) {\r\n    const {\r\n        values: { state },\r\n        setFieldValue,\r\n    } = props;\r\n\r\n    return (\r\n        <div className='property-edit__info-block info-block'>\r\n            <PropertyList\r\n                name='propInfo.selected.id'\r\n                paramListName='paramInfo.selected.id'\r\n                {...props}\r\n            />\r\n            <ParameterList\r\n                name='paramInfo.selected.id'\r\n                {...props}\r\n            />\r\n\r\n            <div className='property-edit__form-menu form-menu'>\r\n                <ButtonItem\r\n                    label='Группы параметров'\r\n                    className={btnClassName('edit-groups', state === 'EDIT_GROUPS')}\r\n                    onClick={() => setFieldValue('state', 'EDIT_GROUPS')}\r\n                />\r\n\r\n                <div className='form-menu__add-buttons form-menu__buttons-block'>\r\n                    <ButtonItem\r\n                        label='Добавить свойство'\r\n                        className={btnClassName('add-property', state === 'ADD_PROP')}\r\n                        onClick={() => setFieldValue('state', 'ADD_PROP')}\r\n                        // disabled={true}\r\n                    />\r\n                    <ButtonItem\r\n                        label='Добавить параметр'\r\n                        className={btnClassName('add-parameter', state === 'ADD_PARAM')}\r\n                        onClick={() => setFieldValue('state', 'ADD_PARAM')}\r\n                    />\r\n                </div>\r\n\r\n                <div className='form-menu__edit-buttons form-menu__buttons-block'>\r\n                    <ButtonItem\r\n                        label='Изменить свойство'\r\n                        className={btnClassName('edit-property', state === 'EDIT_PROP')}\r\n                        onClick={() => setFieldValue('state', 'EDIT_PROP')}\r\n                    />\r\n                    <ButtonItem\r\n                        label='Изменить параметр'\r\n                        className={btnClassName('edit-parameter', state === 'EDIT_PARAM')}\r\n                        onClick={() => setFieldValue('state', 'EDIT_PARAM')}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Form } from 'formik';\r\n\r\ninterface PropSavingBlockProps {\r\n    id?: number;\r\n    needEdit: boolean;\r\n    visible?: boolean;\r\n}\r\n\r\nconst PropertySavingBlock = ({ id, needEdit, visible = true }: PropSavingBlockProps) => {\r\n    if (!visible) {\r\n        return null;\r\n    }\r\n\r\n    const title = needEdit ? 'Изменить свойство' : 'Добавить свойство';\r\n    const className = needEdit ? 'edit-property-form' : 'add-property-form';\r\n    return (\r\n        <div className={`form-block ${className}`}>\r\n            <div className='form-block__title'>{title}</div>\r\n            <Form className='form form--flex'>\r\n                <div className='form__fields'>\r\n                    <div className='form__field'>\r\n                        <label className='form-label' htmlFor='property_name'>\r\n                            Наименование\r\n                        </label>\r\n                        <input\r\n                            className='form-input'\r\n                            id='property_name'\r\n                            type='text'\r\n                            name='property_name'\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <button className='form-button' type='submit'>\r\n                    Сохранить\r\n                </button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PropertySavingBlock;\r\n","import React from 'react';\r\nimport { Form } from 'formik';\r\n\r\ninterface ParamSavingBlockProps {\r\n    id?: number;\r\n    needEdit: boolean;\r\n    visible?: boolean;\r\n}\r\n\r\nconst ParamSavingBlock = ({ id, needEdit, visible = true }: ParamSavingBlockProps) => {\r\n    if (!visible) {\r\n        return null;\r\n    }\r\n\r\n    const title = needEdit ? 'Изменить параметр' : 'Добавить параметр';\r\n    const className = needEdit ? 'edit-parameter-form' : 'add-parameter-form';\r\n    return (\r\n        <div className={`form-block ${className}`}>\r\n            <div className='form-block__title'>{title}</div>\r\n            <Form className='form form--flex'>\r\n                <div className='form__fields'>\r\n                    <div className='form-block__item form__field'>\r\n                        <label\r\n                            className='form-block__label form-label'\r\n                            htmlFor='parameter_name'\r\n                        >\r\n                            Наименование\r\n                        </label>\r\n                        <input\r\n                            className='form-block__input form-input'\r\n                            id='parameter_name'\r\n                            type='text'\r\n                            name='parameter_name'\r\n                        />\r\n                    </div>\r\n                    <div className='form-block__item form__field'>\r\n                        <label\r\n                            className='form-block__label form-label'\r\n                            htmlFor='parameter_type'\r\n                        >\r\n                            Тип данных\r\n                        </label>\r\n                        <select\r\n                            className='form-block__input form-input'\r\n                            name='parameter_type'\r\n                            id='parameter_type'\r\n                        >\r\n                            <option value='1'>1</option>\r\n                            <option value='2'>2</option>\r\n                            <option value='3'>3</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <button className='form-button' type='submit'>\r\n                    Сохранить\r\n                </button>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ParamSavingBlock;\r\n","interface MakeGroupFromProps {\r\n    visible?: boolean;\r\n}\r\n\r\nexport default function MakeGroupFrom({ visible = true }: MakeGroupFromProps) {\r\n    if (!visible) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className='make-group-form'>\r\n            <div className='make-group-form__top'>\r\n                <div className='make-group-form__title'>Группы параметров</div>\r\n                <button className='make-group-form__add-button add-button'>+</button>\r\n            </div>\r\n            <div className='groups-list'>\r\n                <div className='groups-list__group group'>\r\n                    <div className='group-parameters'>\r\n                        <div className='group-parameters__item parameter-item list-item'>\r\n                            <span>свойство 1123123212 23213 13132</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='group-parameters__item list-item'>\r\n                            <span>свойство 2</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='group-parameters__item list-item '>\r\n                            <span>свойство 3</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='group-parameters__item list-item'>\r\n                            <span>свойство 4</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='group__buttons'>\r\n                        <button className='group__add-button group-button add-button'>\r\n                            добавить\r\n                        </button>\r\n                        <button className='group__delete-button group-button delete-button'>\r\n                            удалить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className='groups-list__group group'>\r\n                    <div className='group-parameters'>\r\n                        <div className='group-parameters__item parameter-item list-item'>\r\n                            <span>свойство 1123123212 23213 13132</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='group-parameters__item list-item'>\r\n                            <span>свойство 2</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='group-parameters__item list-item '>\r\n                            <span>свойство 3</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='group-parameters__item list-item'>\r\n                            <span>свойство 4</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='group__buttons'>\r\n                        <button className='group__add-button group-button add-button'>\r\n                            добавить\r\n                        </button>\r\n                        <button className='group__delete-button group-button delete-button'>\r\n                            удалить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className='groups-list__group group'>\r\n                    <div className='group-parameters'>\r\n                        <div className='group-parameters__item parameter-item list-item'>\r\n                            <span>свойство 1123123212 23213 13132</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='group-parameters__item list-item'>\r\n                            <span>свойство 2</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='group-parameters__item list-item '>\r\n                            <span>свойство 3</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='group-parameters__item list-item'>\r\n                            <span>свойство 4</span>\r\n                            <div className='parameter-item__buttons'>\r\n                                <button className='parameter-item__delete-button delete-button'>\r\n                                    -\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='group__buttons'>\r\n                        <button className='group__add-button group-button add-button'>\r\n                            добавить\r\n                        </button>\r\n                        <button className='group__delete-button group-button delete-button'>\r\n                            удалить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Formik, FormikProps } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useAsync } from 'react-async';\r\nimport API from '../../../utils/API';\r\nimport PropertyEditFormValues from './PropertyEditFormValues';\r\nimport FormalProperty from '../../../models/Property/FormalProperty';\r\nimport FormErrorMessage from '../Items/FormErrorMessage';\r\nimport PropertyEditBlock from './Blocks/PropertyEditBlock';\r\nimport PropertySavingBlock from './Blocks/PropertySavingBlock';\r\nimport ParamSavingBlock from './Blocks/ParamSavingBlock';\r\nimport MakeGroupFrom from './Blocks/MakeGroupFrom';\r\nimport FormalParameter from '../../../models/FormalParameter';\r\n\r\nasync function downloadPropListAsync() {\r\n    const allProperty = await API.property.getAllWithParameters();\r\n    const paramIdList = allProperty.flatMap((prop) => {\r\n        const paramList = [\r\n            ...(prop.ungrouped ?? []),\r\n            ...(prop.groups ?? []).flatMap((group) => group.parameters),\r\n        ];\r\n        return paramList.map((param) => param.id!);\r\n    });\r\n\r\n    const isUsingList = await API.formalParameter.isListUsing(paramIdList);\r\n\r\n    const addUsingInfo = (param: FormalParameter) => ({\r\n        ...param,\r\n        isUsing: isUsingList[param.id!],\r\n    });\r\n\r\n    const propList = allProperty.map((prop) => {\r\n        const ungrouped = prop.ungrouped?.map(addUsingInfo);\r\n        const groups = prop.groups?.map(({ parameters, ...rest }) => ({\r\n            ...rest,\r\n            parameters: parameters.map(addUsingInfo),\r\n        }));\r\n\r\n        const isUsing =\r\n            !!ungrouped?.find((param) => param.isUsing) ||\r\n            !!groups?.find((group) => !!group.parameters.find((param) => param.isUsing));\r\n\r\n        return { ...prop, ungrouped, groups, isUsing };\r\n    });\r\n\r\n    return propList;\r\n}\r\nconst uploadPropAsync = async ([property]: FormalProperty[]) =>\r\n    API.property.post(property);\r\nconst removePropAsync = async ([id]: number[]) => API.property.delete(id);\r\n\r\nexport default function PropertyEditForm() {\r\n    const download = useAsync(downloadPropListAsync);\r\n    const uploadProp = useAsync({ deferFn: uploadPropAsync });\r\n    const removeProp = useAsync({ deferFn: removePropAsync });\r\n\r\n    return (\r\n        <div>\r\n            <FormErrorMessage download={download} upload={uploadProp} />\r\n\r\n            <Formik<PropertyEditFormValues>\r\n                enableReinitialize={true}\r\n                initialValues={{\r\n                    propInfo: { removing: {}, selected: {} },\r\n                    paramInfo: { removing: {}, selected: {} },\r\n                    propList: download.data,\r\n                    state: 'EDIT_GROUPS',\r\n                }}\r\n                validationSchema={() =>\r\n                    Yup.object({\r\n                        // state: Yup.string().required('надо'),\r\n                    })\r\n                }\r\n                onSubmit={(values) => {\r\n                    console.log('values', JSON.parse(JSON.stringify(values)));\r\n\r\n                    const { propInfo, paramInfo } = values;\r\n                    for (const info of [propInfo, paramInfo]) {\r\n                        if (info.saving) {\r\n                            uploadProp.run(info.saving);\r\n                            info.saving = undefined;\r\n                        }\r\n                        if (info.removing.id) {\r\n                            removeProp.run(info.removing.id);\r\n                            info.removing = {};\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {FormInner}\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst FormInner = (props: FormikProps<PropertyEditFormValues>) => {\r\n    const { state } = props.values;\r\n    const isPropSave = state === 'ADD_PROP' || state === 'EDIT_PROP';\r\n    const isParamSave = state === 'ADD_PARAM' || state === 'EDIT_PARAM';\r\n    const isGroupEdit = state === 'EDIT_GROUPS';\r\n\r\n    return (\r\n        <div className='property-edit'>\r\n            <PropertyEditBlock {...props} />\r\n            <div className='property-edit__form-block'>\r\n                <PropertySavingBlock\r\n                    id={undefined && 'property?.id'}\r\n                    needEdit={state === 'EDIT_PROP'}\r\n                    visible={isPropSave}\r\n                />\r\n                <ParamSavingBlock\r\n                    id={undefined && 'parameter?.id'}\r\n                    needEdit={state === 'EDIT_PARAM'}\r\n                    visible={isParamSave}\r\n                />\r\n            </div>\r\n            <MakeGroupFrom visible={isGroupEdit} />\r\n        </div>\r\n    );\r\n};\r\n","import { nanoid } from 'nanoid/non-secure';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst menuLabels = [\r\n    'Каталог микроорганизмов',\r\n    'Добавить штамм микроорганизма',\r\n    'Поиск и редактирование штаммов микроорганизмов',\r\n    'Редактирование свойств и параметров микроорганзимов',\r\n    '[Тест] редактирование штамма 1',\r\n    '[Тест] редактирование штамма 2',\r\n];\r\n\r\nconst menuUrlList = [\r\n    '/catalog',\r\n    '/strain/add',\r\n    '/strain/search',\r\n    '/properties',\r\n    '/strain/1/edit',\r\n    '/strain/2/edit',\r\n];\r\n\r\nconst items = menuUrlList.map(\r\n    (url, i) => ({ id: nanoid(), url, label: menuLabels[i] } as const)\r\n);\r\n\r\nexport default function useMenuState() {\r\n    const { pathname } = useLocation(); // адрес текущей страницы\r\n    const [active, setActiveItem] = useState(items[0]);\r\n    const [visible, setVisible] = useState(true);\r\n\r\n    const toggleVisible = useCallback(() => setVisible((visible) => !visible), []);\r\n\r\n    // выделяет пункт меню в зависимости от текущего адреса страницы\r\n    useEffect(() => {\r\n        const item = items.reduce<typeof items[number] | null>((active, item) => {\r\n            const isMatch = pathname.startsWith(item.url);\r\n            const isFound = isMatch && (!active || active.url.length < item.url.length);\r\n            return isFound ? item : active;\r\n        }, null);\r\n\r\n        if (item) {\r\n            setActiveItem(item);\r\n        }\r\n    }, [pathname]);\r\n\r\n    return { items, active, visible, toggleVisible };\r\n}\r\n","import './App.scss';\r\nimport React from 'react';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport BlockMenu from './Forms/BlockMenu';\r\nimport StrainSavingForm from './Forms/StrainSavingForm/StrainSavingForm';\r\nimport MicroorganismsCatalog from './Forms/MicroorganismsCatalog';\r\nimport PropertyEditForm from './Forms/PropertyEditForm/PropertyEditForm';\r\nimport useMenuState from '../hooks/useMenuState';\r\n\r\nfunction App() {\r\n    const { items, active, visible, toggleVisible } = useMenuState();\r\n    const fromLeftClass = visible ? ' data-from-left' : ''\r\n    return (\r\n        <>\r\n            <Header\r\n                onMenuButtonClick={toggleVisible}\r\n                isMenuButtonActive={visible}\r\n                title={active.label}\r\n            />\r\n\r\n            <main className='main container'>\r\n                <div className='main__content main-content'>\r\n                    <BlockMenu active={active} items={items} visible={visible} />\r\n\r\n                    <div className={'main-content__data' + fromLeftClass}>\r\n                        <Switch>\r\n                            <Route path='/catalog' component={MicroorganismsCatalog} />\r\n                            <Route path='/strain/add' component={StrainSavingForm} />\r\n                            <Route path='/strain/search' component={undefined} />\r\n                            <Route path='/properties' component={PropertyEditForm} />\r\n                            <Route\r\n                                path='/strain/:strainId/edit'\r\n                                component={StrainSavingForm}\r\n                            />\r\n                            <Redirect from='/' to='/catalog' />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n}\r\n\r\nconst AppConfigurator = () => (\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default AppConfigurator;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import './styles/sass/main.sass';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport API from './utils/API';\r\n\r\nAPI.apiConfig.baseURL = 'http://localhost:8081';\r\nAPI.apiConfig.defaultTimeout = 30000;\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}