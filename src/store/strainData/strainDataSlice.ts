export {};
// import { createAsyncThunk, createSlice, SerializedError } from '@reduxjs/toolkit';
// import { RootState, AppThunk } from '../store';
// import API from '../../../utils/API';
// import StrainType from '../../../models/StrainType';
// import Strain from '../../../models/Strain';
// import Genus from '../../../models/Genus';

// interface AsyncStatus {
//     status: 'idle' | 'loading' | 'failed' | 'success';
//     error?: SerializedError;
// }

// type RemoteData<T> = {
//     value: T;
//     status: 'idle' | 'loading' | 'failed' | 'success';
//     error?: SerializedError;
// };

// export interface DataState {
//     genus: RemoteData<Genus>;
//     genusList: RemoteData<Genus[]>;
//     type: RemoteData<StrainType>;
//     typeList: RemoteData<StrainType[]>;
//     strain: RemoteData<Strain>;
//     strainList: { value: Strain[] };
// }

// const initialState: DataState = {
//     genus: {
//         list: [],
//         status: 'idle',
//     },
//     type: {
//         list: [],
//         status: 'idle',
//     },
//     strain: {
//         list: [],
//         status: 'idle',
//     },
// };

// export const getGenusListAsync = createAsyncThunk(
//     'genus/fetchList',
//     async () => await API.genus.getAll()
// );

// export const dataSlice = createSlice({
//     name: 'data',
//     initialState,
//     reducers: {
//         // incrementByAmount: (state, action: PayloadAction<number>) => {
//         //     state.value += action.payload;
//         // },
//     },
//     // The `extraReducers` field lets the slice handle actions defined elsewhere,
//     // including actions generated by createAsyncThunk or in other slices.
//     extraReducers: (builder) => {
//         builder
//             .addCase(getGenusListAsync.pending, (state) => {
//                 state.genus.status = 'downloading';
//             })
//             .addCase(getGenusListAsync.fulfilled, (state, action) => {
//                 state.genus.status = 'idle';
//                 state.genus.list = action.payload;
//             })
//             .addCase(getGenusListAsync.rejected, (state, action) => {
//                 state.genus.status = 'failed';
//                 state.genus.error = action.error;
//             });
//     },
// });

// export const actions = dataSlice.actions;

// const dataReduser = dataSlice.reducer;

// export default dataReduser;
